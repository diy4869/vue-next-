import { o as n, c as s, a } from './app.015d3e56.js'
const t =
    '{"title":"transform 转换","description":"","frontmatter":{},"headers":[{"level":2,"title":"transform 转换","slug":"transform-转换"},{"level":2,"title":"获取基本转换预设","slug":"获取基本转换预设"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/transform.md","lastUpdated":1625622955224}',
  p = {},
  o = a(
    '<h2 id="transform-转换"><a class="header-anchor" href="#transform-转换" aria-hidden="true">#</a> transform 转换</h2><p>前面的部分，对整个<code>parse</code>过程做了说明，这一系列，将对<code>transform</code>阶段做说明，依然会涉及多个部分，看到这里就完成了整个编译过程三分之一的内容了。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>\n  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n\n  <span class="token comment">// 获取ast</span>\n  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> template\n\n  <span class="token comment">// 转换</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>nodeTransforms<span class="token punctuation">,</span> directiveTransforms<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span>\n    prefixIdentifiers\n  <span class="token punctuation">)</span>\n\n  <span class="token function">transform</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      prefixIdentifiers<span class="token punctuation">,</span>\n      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>nodeTransforms<span class="token punctuation">,</span>\n        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// user transforms</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        directiveTransforms<span class="token punctuation">,</span>\n        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// user transforms</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token comment">// 生成block tree 用于最终渲染</span>\n  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      prefixIdentifiers\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>从上面可以知道获取了基本的转换预设，而且做了解构赋值。并且调用了<code>transform</code>方法，把上一步拿到的AST和一些配置去做了合并去执行了<code>transform</code>。下面就先看下<code>getBaseTransformPreset</code>干了啥。</p><h2 id="获取基本转换预设"><a class="header-anchor" href="#获取基本转换预设" aria-hidden="true">#</a> 获取基本转换预设</h2><div class="language-ts"><pre><code><span class="token comment">// 获取基本转换预设</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span>\n  prefixIdentifiers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> TransformPreset <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      transformOnce<span class="token punctuation">,</span>\n      transformIf<span class="token punctuation">,</span>\n      transformFor<span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token punctuation">(</span>__COMPAT__ <span class="token operator">?</span> <span class="token punctuation">[</span>transformFilter<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> prefixIdentifiers\n        <span class="token operator">?</span> <span class="token punctuation">[</span>\n            <span class="token comment">// order is important</span>\n            trackVForSlotScopes<span class="token punctuation">,</span>\n            transformExpression\n          <span class="token punctuation">]</span>\n        <span class="token operator">:</span> __BROWSER__ <span class="token operator">&amp;&amp;</span> __DEV__\n          <span class="token operator">?</span> <span class="token punctuation">[</span>transformExpression<span class="token punctuation">]</span>\n          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      transformSlotOutlet<span class="token punctuation">,</span>\n      transformElement<span class="token punctuation">,</span>\n      trackSlotScopes<span class="token punctuation">,</span>\n      transformText\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      on<span class="token operator">:</span> transformOn<span class="token punctuation">,</span>\n      bind<span class="token operator">:</span> transformBind<span class="token punctuation">,</span>\n      model<span class="token operator">:</span> transformModel\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从上面可以看到<code>once、if、for、slot、slotScope、on、bind、model</code>等去做了一个转换，下面将针对这些内容去做一个简单的说明。</p>',
    8
  )
p.render = function(a, t, p, e, c, r) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
