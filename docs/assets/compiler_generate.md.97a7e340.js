import { o as n, c as s, a } from './app.03151976.js'
const t =
    '{"title":"generate 代码生成","description":"","frontmatter":{},"headers":[{"level":2,"title":"generate 代码生成","slug":"generate-代码生成"}],"relativePath":"compiler/generate.md","lastUpdated":1625828751119}',
  p = {},
  o = a(
    '<h2 id="generate-代码生成"><a class="header-anchor" href="#generate-代码生成" aria-hidden="true">#</a> generate 代码生成</h2><p><code>generate</code>依然接收一个AST，下面就来看下具体的实现过程。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CodegenOptions <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    onContextCreated<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>onContextCreated<span class="token punctuation">)</span> options<span class="token punctuation">.</span><span class="token function">onContextCreated</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    mode<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    indent<span class="token punctuation">,</span>\n    deindent<span class="token punctuation">,</span>\n    newline<span class="token punctuation">,</span>\n    scopeId<span class="token punctuation">,</span>\n    ssr\n  <span class="token punctuation">}</span> <span class="token operator">=</span> context\n\n  <span class="token keyword">const</span> hasHelpers <span class="token operator">=</span> ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> useWithBlock <span class="token operator">=</span> <span class="token operator">!</span>prefixIdentifiers <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> <span class="token string">&#39;module&#39;</span>\n  <span class="token keyword">const</span> genScopeId <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> scopeId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span>\n  <span class="token keyword">const</span> isSetupInlined <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>inline\n\n  <span class="token comment">// preambles</span>\n  <span class="token comment">// in setup() inline mode, the preamble is generated in a sub context</span>\n  <span class="token comment">// and returned separately.</span>\n  <span class="token keyword">const</span> preambleContext <span class="token operator">=</span> isSetupInlined\n    <span class="token operator">?</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n    <span class="token operator">:</span> context\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genModulePreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> preambleContext<span class="token punctuation">,</span> genScopeId<span class="token punctuation">,</span> isSetupInlined<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> preambleContext<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// enter render function</span>\n  <span class="token keyword">const</span> functionName <span class="token operator">=</span> ssr <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">ssrRender</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">render</span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> ssr <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">&#39;_ctx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_parent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_attrs&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;_ctx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_cache&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>bindingMetadata <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// binding optimization args</span>\n    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;$props&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$setup&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$options&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> signature <span class="token operator">=</span>\n    <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>isTS\n      <span class="token operator">?</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>arg <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: any</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSetupInlined<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// root-level _withId wrapping is no longer necessary after 3.0.8 and is</span>\n    <span class="token comment">// a noop, it&#39;s only kept so that code compiled with 3.0.8+ can run with</span>\n    <span class="token comment">// runtime &lt; 3.0.8.</span>\n    <span class="token comment">// TODO: consider removing in 3.1</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>functionName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PURE_ANNOTATION</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">WITH_ID</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupInlined <span class="token operator">||</span> genScopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>signature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) =&gt; {</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>functionName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>signature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) {</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>useWithBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">with (_ctx) {</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// function mode const declarations should be inside with block</span>\n    <span class="token comment">// also they should be renamed to avoid collision with user properties</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasHelpers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">push</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>helpers\n          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } = _Vue</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// generate asset resolution statements</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>components<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genAssets</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>components<span class="token punctuation">,</span> <span class="token string">&#39;component&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>directives<span class="token punctuation">.</span>length <span class="token operator">||</span> ast<span class="token punctuation">.</span>temps <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>directives<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genAssets</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>directives<span class="token punctuation">,</span> <span class="token string">&#39;directive&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>temps <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>filters <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>filters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">genAssets</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>filters<span class="token punctuation">,</span> <span class="token string">&#39;filter&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>temps <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">let </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ast<span class="token punctuation">.</span>temps<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_temp</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>components<span class="token punctuation">.</span>length <span class="token operator">||</span> ast<span class="token punctuation">.</span>directives<span class="token punctuation">.</span>length <span class="token operator">||</span> ast<span class="token punctuation">.</span>temps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// generate the VNode tree expression</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">null</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>useWithBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">deindent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">deindent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSetupInlined<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    ast<span class="token punctuation">,</span>\n    code<span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n    preamble<span class="token operator">:</span> isSetupInlined <span class="token operator">?</span> preambleContext<span class="token punctuation">.</span>code <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token comment">// SourceMapGenerator does have toJSON() method but it&#39;s not in the types</span>\n    map<span class="token operator">:</span> context<span class="token punctuation">.</span>map <span class="token operator">?</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>map <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    3
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
