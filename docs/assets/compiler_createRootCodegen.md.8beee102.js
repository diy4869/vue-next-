import { o as n, c as s, a } from './app.c3e51dbf.js'
const t =
    '{"title":"创建跟节点代码生成","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建跟节点代码生成","slug":"创建跟节点代码生成"}],"relativePath":"compiler/createRootCodegen.md","lastUpdated":1625826264878}',
  p = {},
  o = a(
    '<h2 id="创建跟节点代码生成"><a class="header-anchor" href="#创建跟节点代码生成" aria-hidden="true">#</a> 创建跟节点代码生成</h2><div class="language-ts"><pre><code>\n<span class="token keyword">function</span> <span class="token function">createRootCodegen</span><span class="token punctuation">(</span>root<span class="token operator">:</span> RootNode<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> helper<span class="token punctuation">,</span> removeHelper <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> root\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token comment">// 如果单个子元素是element则转换成块</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingleElementRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// single element root is never hoisted so codegenNode will never be</span>\n      <span class="token comment">// SimpleExpressionNode</span>\n      <span class="token keyword">const</span> codegenNode <span class="token operator">=</span> child<span class="token punctuation">.</span>codegenNode\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>codegenNode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>codegenNode<span class="token punctuation">.</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">removeHelper</span><span class="token punctuation">(</span><span class="token constant">CREATE_VNODE</span><span class="token punctuation">)</span>\n          codegenNode<span class="token punctuation">.</span>isBlock <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">)</span>\n          <span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_BLOCK</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> codegenNode\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// - single &lt;slot/&gt;, IfNode, ForNode: already blocks.</span>\n      <span class="token comment">// - single text node: always patched.</span>\n      <span class="token comment">// root codegen falls through via genNode()</span>\n      root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> child\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// root has multiple nodes - return a fragment block. </span>\n    <span class="token comment">// 当根节点有多个节点时，返回一个fragment</span>\n    <span class="token keyword">let</span> patchFlag <span class="token operator">=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STABLE_FRAGMENT</span>\n    <span class="token keyword">let</span> patchFlagText <span class="token operator">=</span> PatchFlagNames<span class="token punctuation">[</span>PatchFlags<span class="token punctuation">.</span><span class="token constant">STABLE_FRAGMENT</span><span class="token punctuation">]</span>\n    <span class="token comment">// check if the fragment actually contains a single valid child with</span>\n    <span class="token comment">// the rest being comments</span>\n    \n    <span class="token comment">// 检查Fragement内是否包含一个子元素，并且不是注释</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      __DEV__ <span class="token operator">&amp;&amp;</span>\n      children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DEV_ROOT_FRAGMENT</span>\n      patchFlagText <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>PatchFlagNames<span class="token punctuation">[</span>PatchFlags<span class="token punctuation">.</span><span class="token constant">DEV_ROOT_FRAGMENT</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span> <span class="token comment">// 调用VNodeCall 生成vnode</span>\n      context<span class="token punctuation">,</span>\n      <span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">FRAGMENT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n      root<span class="token punctuation">.</span>children<span class="token punctuation">,</span>\n      patchFlag <span class="token operator">+</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>patchFlagText<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n      <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n      <span class="token boolean">true</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// no children = noop. codegen will return null.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    2
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
