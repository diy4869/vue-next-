import { o as n, c as s, a } from './app.03151976.js'
const t =
    '{"title":"解析子元素","description":"","frontmatter":{},"headers":[{"level":2,"title":"解析子元素","slug":"解析子元素"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/parseChildren.md","lastUpdated":1625565520430}',
  p = {},
  o = a(
    '<h2 id="解析子元素"><a class="header-anchor" href="#解析子元素" aria-hidden="true">#</a> 解析子元素</h2><p>其实这部分更建议自己断点调试去看，相对于看文来说，你也不一定能懂。官方对很多都做了兼容，当你看过这部分后，你也就大概懂了怎么去<code>parse</code>了。看文和自己去调试毕竟是2回事，反正已经看到这了，那就继续看吧。这部分源码在<code>packages/runtime-core/src/parse.ts</code>，基本整个解析环节都在这个文件。</p><p>解析的步骤：</p><ol><li>判断是否结束标签</li><li>获取<code>template</code>内容，这个<code>context.source</code>指的是剩余未解析的内容</li><li>初始化<code>node</code>数组</li><li>判断<code>mode</code>是否为文本，或者是<code>textarea</code></li><li>其他</li></ol><p>其实这块我也不知道该怎么表达，看看注释就好，其实对于解析这块，学过编译原理应该知道有个词叫词法分析和语法分析，这部分其实也就是在做这块。通过<a href="https://baike.baidu.com/item/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA?fromtitle=%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA&amp;fromid=2081914" target="_blank" rel="noopener noreferrer">有限状态机</a>的形式，对<code>template</code>进行解析。所谓的解析就是对整个<code>template</code>字符串进行循环解析并校验语法。</p><p>一个大概的流程：</p><ul><li>初始化一个数组</li><li>解析对应的语法</li><li>解析完成后去添加到数组内，并维护一个对象，该对象内有每次解析的位置，剩余未解析的内容。</li><li>然后不断循环整个字符串校验</li><li>最终拿到的就是一个解析好的一个数组。</li></ul><div class="language-ts"><pre><code>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> TextModes <span class="token punctuation">{</span>\n  <span class="token comment">//          | Elements | Entities | End sign              | Inside of</span>\n  <span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token comment">//    | ✔        | ✔        | End tags of ancestors | 普通文本</span>\n  <span class="token constant">RCDATA</span><span class="token punctuation">,</span> <span class="token comment">//  | ✘        | ✔        | End tag of the parent | &lt;textarea&gt;</span>\n  <span class="token constant">RAWTEXT</span><span class="token punctuation">,</span> <span class="token comment">// | ✘        | ✘        | End tag of the parent | &lt;style&gt;,&lt;script&gt;</span>\n  <span class="token constant">CDATA</span><span class="token punctuation">,</span>\n  <span class="token constant">ATTRIBUTE_VALUE</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> TextModes<span class="token punctuation">,</span>\n  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 已经解析的一个内容</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> ns <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>ns <span class="token operator">:</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span> <span class="token comment">// 0</span>\n  <span class="token keyword">const</span> nodes<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 测试</span>\n    __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token comment">// 获取模板</span>\n    <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source\n    <span class="token comment">// 创建node</span>\n    <span class="token keyword">let</span> node<span class="token operator">:</span> TemplateChildNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_BEFORE_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state</span>\n          <span class="token comment">// 以 &lt;!-- 开头，当做注释解析</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!DOCTYPE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Ignore DOCTYPE by a limitation.</span>\n            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;![CDATA[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">!==</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              node <span class="token operator">=</span> <span class="token function">parseCDATA</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">CDATA_IN_HTML_CONTENT</span><span class="token punctuation">)</span>\n              node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INCORRECTLY_OPENED_COMMENT</span><span class="token punctuation">)</span>\n            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_BEFORE_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">MISSING_END_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 缺少结束标记名称</span>\n            <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n            <span class="token keyword">continue</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_INVALID_END_TAG</span><span class="token punctuation">)</span> <span class="token comment">// 无效的结束标签</span>\n            <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token comment">// 解析标签</span>\n            <span class="token keyword">continue</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">emitError</span><span class="token punctuation">(</span>\n              context<span class="token punctuation">,</span>\n              ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">,</span> <span class="token comment">// 标签名称的第一个字符无效</span>\n              <span class="token number">2</span>\n            <span class="token punctuation">)</span>\n            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 说明是element</span>\n          node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">emitError</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME</span><span class="token punctuation">,</span>\n            <span class="token number">1</span>\n          <span class="token punctuation">)</span>\n          node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// node不存在</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 是数组，循环并添加</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 添加节点</span>\n      <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面这部分执行完成后一个<code>AST</code>结构就算有了，而下面这段只是把解析到的空格做了一个删除处理。</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> TextModes<span class="token punctuation">,</span> <span class="token comment">// 默认为0</span>\n  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ... 其实就是上面的那部分代码</span>\n\n  <span class="token comment">// Whitespace handling strategy like v2</span>\n  <span class="token keyword">let</span> removedWhitespace <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 是否移除空格</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!==</span> TextModes<span class="token punctuation">.</span><span class="token constant">RAWTEXT</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> preserve <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>whitespace <span class="token operator">===</span> <span class="token string">&#39;preserve&#39;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inPre <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\t\\r\\n\\f ]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> prev <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n          <span class="token keyword">const</span> next <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>\n          <span class="token comment">// Remove if:</span>\n          <span class="token comment">// - the whitespace is the first or last node, or: 如果空格是第一个或者最后一个节点</span>\n          <span class="token comment">// - (condense mode) the whitespace is adjacent to a comment, or: 或者空格和注释相邻</span>\n          <span class="token comment">// - (condense mode) the whitespace is between two elements AND contains newline 或者空格在2个元素之间包含换行符</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>\n            <span class="token operator">!</span>prev <span class="token operator">||</span>\n            <span class="token operator">!</span>next <span class="token operator">||</span>\n            <span class="token punctuation">(</span><span class="token operator">!</span>preserve <span class="token operator">&amp;&amp;</span>\n              <span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span> <span class="token operator">||</span> <span class="token comment">// 3</span>\n              next<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span> <span class="token operator">||</span> <span class="token comment">// 3</span>\n                <span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 1</span>\n                next<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// 1</span>\n                  <span class="token operator">/</span><span class="token punctuation">[</span>\\r\\n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            removedWhitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 移除空格</span>\n            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Otherwise, the whitespace is condensed into a single space</span>\n            <span class="token comment">// 否则空格将压缩为1个空格</span>\n            node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&#39; &#39;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>preserve<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// in condense mode, consecutive whitespaces in text are condensed</span>\n          <span class="token comment">// down to a single space.</span>\n          node<span class="token punctuation">.</span>content <span class="token operator">=</span> node<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\t\\r\\n\\f ]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// also remove comment nodes in prod by default</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token operator">!</span>__DEV__ <span class="token operator">&amp;&amp;</span>\n        node<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token operator">!</span>context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>comments\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        removedWhitespace <span class="token operator">=</span> <span class="token boolean">true</span>\n        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>inPre <span class="token operator">&amp;&amp;</span> parent <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">isPreTag</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// remove leading newline per html spec</span>\n      <span class="token comment">// https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element</span>\n      <span class="token keyword">const</span> first <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> first<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        first<span class="token punctuation">.</span>content <span class="token operator">=</span> first<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\r?\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 为true就移除空格</span>\n  <span class="token keyword">return</span> removedWhitespace <span class="token operator">?</span> nodes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token operator">:</span> nodes\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>上面就是一个大概的解析流程，其实有几个函数可以去关注下。</p><ul><li>getCursor 当前解析的位置</li><li>advanceBy 每次解析，需要前进多少步</li><li>getSelection 解析的一个位置信息</li><li>getNewPosition 获取新的位置</li></ul><p>基本每次解析都是围绕这一个函数去实现的，下一节去具体说明下。</p>',
    14
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
