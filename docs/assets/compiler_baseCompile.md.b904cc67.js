import { o as n, c as s, a } from './app.5846fbd1.js'
const t =
    '{"title":"Compiler 编译","description":"","frontmatter":{},"headers":[{"level":2,"title":"Compiler 编译","slug":"compiler-编译"}],"relativePath":"compiler/baseCompile.md","lastUpdated":1625470839431}',
  p = {},
  o = a(
    '<h2 id="compiler-编译"><a class="header-anchor" href="#compiler-编译" aria-hidden="true">#</a> Compiler 编译</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span>\n  template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>\n    template<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> parserOptions<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// ignore &lt;script&gt; and &lt;tag&gt;</span>\n        <span class="token comment">// this is not put inside DOMNodeTransforms because that list is used</span>\n        <span class="token comment">// by compiler-ssr to generate vnode fallback branches</span>\n        ignoreSideEffectTags<span class="token punctuation">,</span>\n        <span class="token operator">...</span>DOMNodeTransforms<span class="token punctuation">,</span>\n        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        DOMDirectiveTransforms<span class="token punctuation">,</span>\n        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      transformHoist<span class="token operator">:</span> __BROWSER__ <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stringifyStatic\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    2
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
