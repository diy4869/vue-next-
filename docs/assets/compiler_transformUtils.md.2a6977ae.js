import { o as n, c as s, a } from './app.547ab472.js'
const p =
    '{"title":"stringifyDynamicPropNames","description":"","frontmatter":{},"headers":[{"level":2,"title":"stringifyDynamicPropNames","slug":"stringifydynamicpropnames"},{"level":2,"title":"buildProps","slug":"buildprops"}],"relativePath":"compiler/transformUtils.md","lastUpdated":1641357564057}',
  t = {},
  o = a(
    '<h2 id="stringifydynamicpropnames"><a class="header-anchor" href="#stringifydynamicpropnames" aria-hidden="true">#</a> stringifyDynamicPropNames</h2><div class="language-ts"><pre><code><span class="token comment">// 对props做stringify，因为generate期间，是作为string形式执行的</span>\n<span class="token keyword">function</span> <span class="token function">stringifyDynamicPropNames</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> propsNamesString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    propsNamesString <span class="token operator">+=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>props<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> propsNamesString <span class="token operator">+=</span> <span class="token string">&#39;, &#39;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> propsNamesString <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">]</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="buildprops"><a class="header-anchor" href="#buildprops" aria-hidden="true">#</a> buildProps</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">buildProps</span><span class="token punctuation">(</span>\n  node<span class="token operator">:</span> ElementNode<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span>\n  props<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token string">&#39;props&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>props<span class="token punctuation">,</span>\n  ssr <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> PropsExpression <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  directives<span class="token operator">:</span> DirectiveNode<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  patchFlag<span class="token operator">:</span> <span class="token builtin">number</span>\n  dynamicPropNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> loc<span class="token operator">:</span> elementLoc <span class="token punctuation">}</span> <span class="token operator">=</span> node\n  <span class="token keyword">const</span> isComponent <span class="token operator">=</span> node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>\n  <span class="token keyword">let</span> properties<span class="token operator">:</span> ObjectExpression<span class="token punctuation">[</span><span class="token string">&#39;properties&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> mergeArgs<span class="token operator">:</span> PropsExpression<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> runtimeDirectives<span class="token operator">:</span> DirectiveNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// patchFlag analysis 分析patchFlag</span>\n  <span class="token keyword">let</span> patchFlag <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">let</span> hasRef <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> hasClassBinding <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> hasStyleBinding <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> hasHydrationEventBinding <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> hasDynamicKeys <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> hasVnodeHook <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">const</span> dynamicPropNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">analyzePatchFlag</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token operator">:</span> Property<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 是否静态表达式</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticExp</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> name <span class="token operator">=</span> key<span class="token punctuation">.</span>content\n      <span class="token keyword">const</span> isEventHandler <span class="token operator">=</span> <span class="token function">isOn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 是否v-on</span>\n\n      <span class="token comment">// ... SSR相关</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isEventHandler <span class="token operator">&amp;&amp;</span> <span class="token function">isReservedProp</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hasVnodeHook <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        value<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CACHE_EXPRESSION</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span> <span class="token operator">||</span>\n          value<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token function">getConstantType</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// skip if the prop is a cached handler or has constant value</span>\n        <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;ref&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否ref</span>\n        hasRef <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否绑定class</span>\n        <span class="token class-name">hasClassBinding</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否绑定style</span>\n        hasStyleBinding <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;key&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dynamicPropNames<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dynamicPropNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      hasDynamicKeys <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// static attribute</span>\n    <span class="token keyword">const</span> prop <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> loc<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> prop\n      <span class="token keyword">let</span> isStatic <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;ref&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hasRef <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token comment">// in inline mode there is no setupState object, so we can&#39;t use string</span>\n        <span class="token comment">// keys to set the ref. Instead, we need to transform it to pass the</span>\n        <span class="token comment">// acrtual ref instead.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>inline<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          isStatic <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// skip is on &lt;component&gt;, or is=&quot;vue:xxx&quot;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        name <span class="token operator">===</span> <span class="token string">&#39;is&#39;</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token punctuation">(</span><span class="token function">isComponentTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;vue:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n      properties<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n        <span class="token function">createObjectProperty</span><span class="token punctuation">(</span>\n          <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span>\n            name<span class="token punctuation">,</span>\n            <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token function">getInnerRange</span><span class="token punctuation">(</span>loc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span>\n            value <span class="token operator">?</span> value<span class="token punctuation">.</span>content <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            isStatic<span class="token punctuation">,</span>\n            value <span class="token operator">?</span> value<span class="token punctuation">.</span>loc <span class="token operator">:</span> loc\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// directives</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> exp<span class="token punctuation">,</span> loc <span class="token punctuation">}</span> <span class="token operator">=</span> prop\n      <span class="token keyword">const</span> isVBind <span class="token operator">=</span> name <span class="token operator">===</span> <span class="token string">&#39;bind&#39;</span> <span class="token comment">// 是否v-bind</span>\n      <span class="token keyword">const</span> isVOn <span class="token operator">=</span> name <span class="token operator">===</span> <span class="token string">&#39;on&#39;</span> <span class="token comment">// 是否v-on</span>\n\n      <span class="token comment">// skip v-slot - it is handled by its dedicated transform.</span>\n      <span class="token comment">// 跳过v-slot slot应该在转换期间进行处理</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          context<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>\n            <span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_V_SLOT_MISPLACED</span><span class="token punctuation">,</span> loc<span class="token punctuation">)</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// skip v-once - it is handled by its dedicated transform.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;once&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// skip v-is and :is on &lt;component&gt;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        name <span class="token operator">===</span> <span class="token string">&#39;is&#39;</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span>isVBind <span class="token operator">&amp;&amp;</span> <span class="token function">isComponentTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBindKey</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// skip v-on in SSR compilation SSR期间跳过v-on</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isVOn <span class="token operator">&amp;&amp;</span> ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// special case for v-bind and v-on with no argument</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arg <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>isVBind <span class="token operator">||</span> isVOn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hasDynamicKeys <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mergeArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n              <span class="token comment">// 创建对象表达式，并保证属性唯一</span>\n              <span class="token function">createObjectExpression</span><span class="token punctuation">(</span><span class="token function">dedupeProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">,</span> elementLoc<span class="token punctuation">)</span>\n            <span class="token punctuation">)</span>\n            properties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>isVBind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// v2兼容处理</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// v-on=&quot;obj&quot; -&gt; toHandlers(obj)</span>\n            mergeArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CALL_EXPRESSION</span><span class="token punctuation">,</span>\n              loc<span class="token punctuation">,</span>\n              callee<span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_HANDLERS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              arguments<span class="token operator">:</span> <span class="token punctuation">[</span>exp<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          context<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>\n            <span class="token function">createCompilerError</span><span class="token punctuation">(</span>\n              isVBind\n                <span class="token operator">?</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_V_BIND_NO_EXPRESSION</span>\n                <span class="token operator">:</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_V_ON_NO_EXPRESSION</span><span class="token punctuation">,</span>\n              loc\n            <span class="token punctuation">)</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">continue</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 获取当前指令对应的转换函数</span>\n      <span class="token keyword">const</span> directiveTransform <span class="token operator">=</span> context<span class="token punctuation">.</span>directiveTransforms<span class="token punctuation">[</span>name<span class="token punctuation">]</span> \n      <span class="token keyword">if</span> <span class="token punctuation">(</span>directiveTransform<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果存在指令，将调用对应的指令函数进行转换</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> needRuntime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">directiveTransform</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n        <span class="token operator">!</span>ssr <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>analyzePatchFlag<span class="token punctuation">)</span>\n        properties<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          runtimeDirectives<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            directiveImportMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> needRuntime<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 不需要转换，这是用户自定义的指令</span>\n        runtimeDirectives<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      __COMPAT__ <span class="token operator">&amp;&amp;</span>\n      prop<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span> <span class="token operator">&amp;&amp;</span>\n      prop<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;ref&#39;</span> <span class="token operator">&amp;&amp;</span>\n      context<span class="token punctuation">.</span>scopes<span class="token punctuation">.</span>vFor <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n      <span class="token function">checkCompatEnabled</span><span class="token punctuation">(</span>\n        CompilerDeprecationTypes<span class="token punctuation">.</span><span class="token constant">COMPILER_V_FOR_REF</span><span class="token punctuation">,</span>\n        context<span class="token punctuation">,</span>\n        prop<span class="token punctuation">.</span>loc\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      properties<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n        <span class="token function">createObjectProperty</span><span class="token punctuation">(</span>\n          <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span><span class="token string">&#39;refInFor&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> propsExpression<span class="token operator">:</span> PropsExpression <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\n  <span class="token comment">// has v-bind=&quot;object&quot; or v-on=&quot;object&quot;, wrap with mergeProps</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>mergeArgs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      mergeArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n        <span class="token comment">// 如果存在多个属性，将保证唯一性，并创建对象表达式</span>\n        <span class="token function">createObjectExpression</span><span class="token punctuation">(</span><span class="token function">dedupeProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">,</span> elementLoc<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mergeArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      propsExpression <span class="token operator">=</span> <span class="token function">createCallExpression</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">MERGE_PROPS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        mergeArgs<span class="token punctuation">,</span>\n        elementLoc\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// single v-bind with nothing else - no need for a mergeProps call</span>\n      propsExpression <span class="token operator">=</span> mergeArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    propsExpression <span class="token operator">=</span> <span class="token function">createObjectExpression</span><span class="token punctuation">(</span>\n      <span class="token function">dedupeProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      elementLoc\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// patchFlag analysis</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否动态Props</span>\n    patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">FULL_PROPS</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasClassBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否动态class</span>\n      <span class="token class-name">patchFlag</span> <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">CLASS</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasStyleBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否动态style</span>\n      patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STYLE</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicPropNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 是否动态props属性</span>\n      patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">PROPS</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasHydrationEventBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">HYDRATE_EVENTS</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">(</span>patchFlag <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> patchFlag <span class="token operator">===</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">HYDRATE_EVENTS</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token punctuation">(</span>hasRef <span class="token operator">||</span> hasVnodeHook <span class="token operator">||</span> runtimeDirectives<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">NEED_PATCH</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    props<span class="token operator">:</span> propsExpression<span class="token punctuation">,</span>\n    directives<span class="token operator">:</span> runtimeDirectives<span class="token punctuation">,</span>\n    patchFlag<span class="token punctuation">,</span>\n    dynamicPropNames\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',
    4
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
