import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"transformElement 转换元素","description":"","frontmatter":{},"headers":[{"level":2,"title":"transformElement 转换元素","slug":"transformelement-转换元素"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/transformElement.md","lastUpdated":1641357564056}',
  p = {},
  o = a(
    '<h2 id="transformelement-转换元素"><a class="header-anchor" href="#transformelement-转换元素" aria-hidden="true">#</a> transformElement 转换元素</h2><p>上一篇对基本的转换流程做了个说明（写注释），这篇来看<code>transformElement</code>的一个实现。直接看<code>return</code>内的函数即可。 转换的目的是为了实现一个调用<code>VNode</code>的一个方式，具体在<code>generate</code>阶段说明</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> transformElement<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// perform the work on exit, after all child expressions have been</span>\n  <span class="token comment">// processed and merged.</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">postTransformElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    node <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode<span class="token operator">!</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token operator">!</span><span class="token punctuation">(</span>\n        node<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>\n          node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> node\n    <span class="token comment">// 判断是否为组件</span>\n    <span class="token keyword">const</span> isComponent <span class="token operator">=</span> node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>\n\n    <span class="token comment">// The goal of the transform is to create a codegenNode implementing the</span>\n    <span class="token comment">// VNodeCall interface.</span>\n    <span class="token keyword">let</span> vnodeTag <span class="token operator">=</span> isComponent\n      <span class="token operator">?</span> <span class="token function">resolveComponentType</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> ComponentNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n\n    <span class="token comment">// ... V2兼容</span>\n\n\n    <span class="token comment">// 是否动态组件</span>\n    <span class="token keyword">const</span> isDynamicComponent <span class="token operator">=</span>\n      <span class="token function">isObject</span><span class="token punctuation">(</span>vnodeTag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnodeTag<span class="token punctuation">.</span>callee <span class="token operator">===</span> <span class="token constant">RESOLVE_DYNAMIC_COMPONENT</span>\n\n    <span class="token keyword">let</span> vnodeProps<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;props&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> vnodeChildren<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> vnodePatchFlag<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;patchFlag&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> patchFlag<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> vnodeDynamicProps<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;dynamicProps&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> dynamicPropNames<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n    <span class="token keyword">let</span> vnodeDirectives<span class="token operator">:</span> VNodeCall<span class="token punctuation">[</span><span class="token string">&#39;directives&#39;</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">let</span> shouldUseBlock <span class="token operator">=</span>\n      <span class="token comment">// dynamic component may resolve to plain elements</span>\n      isDynamicComponent <span class="token operator">||</span>\n      vnodeTag <span class="token operator">===</span> <span class="token constant">TELEPORT</span> <span class="token operator">||</span>\n      vnodeTag <span class="token operator">===</span> <span class="token constant">SUSPENSE</span> <span class="token operator">||</span>\n      <span class="token punctuation">(</span><span class="token operator">!</span>isComponent <span class="token operator">&amp;&amp;</span>\n        <span class="token comment">// &lt;svg&gt; and &lt;foreignObject&gt; must be forced into blocks so that block</span>\n        <span class="token comment">// updates inside get proper isSVG flag at runtime. (#639, #643)</span>\n        <span class="token comment">// This is technically web-specific, but splitting the logic out of core</span>\n        <span class="token comment">// leads to too much unnecessary complexity.</span>\n        <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;svg&#39;</span> <span class="token operator">||</span>\n          tag <span class="token operator">===</span> <span class="token string">&#39;foreignObject&#39;</span> <span class="token operator">||</span>\n          <span class="token comment">// #938: elements with dynamic keys should be forced into blocks</span>\n          <span class="token function">findProp</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// props</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 参考转换的工具函数篇</span>\n      <span class="token keyword">const</span> propsBuildResult <span class="token operator">=</span> <span class="token function">buildProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      vnodeProps <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>props\n      patchFlag <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>patchFlag\n      dynamicPropNames <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>dynamicPropNames\n      <span class="token keyword">const</span> directives <span class="token operator">=</span> propsBuildResult<span class="token punctuation">.</span>directives\n      vnodeDirectives <span class="token operator">=</span>\n        directives <span class="token operator">&amp;&amp;</span> directives<span class="token punctuation">.</span>length\n          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">createArrayExpression</span><span class="token punctuation">(</span>\n              directives<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dir <span class="token operator">=&gt;</span> <span class="token function">buildDirectiveArgs</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token keyword">as</span> DirectiveArguments<span class="token punctuation">)</span>\n          <span class="token operator">:</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// children</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeTag <span class="token operator">===</span> <span class="token constant">KEEP_ALIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Although a built-in component, we compile KeepAlive with raw children</span>\n        <span class="token comment">// instead of slot functions so that it can be used inside Transition</span>\n        <span class="token comment">// or other Transition-wrapping HOCs.</span>\n        <span class="token comment">// To ensure correct updates with block optimizations, we need to:</span>\n        <span class="token comment">// 1. Force keep-alive into a block. This avoids its children being</span>\n        <span class="token comment">//    collected by a parent block.</span>\n        shouldUseBlock <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token comment">// 2. Force keep-alive to always be updated, since it uses raw children.</span>\n        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          context<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>\n            <span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_KEEP_ALIVE_INVALID_CHILDREN</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n              start<span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">,</span>\n              end<span class="token operator">:</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">.</span>end<span class="token punctuation">,</span>\n              source<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> shouldBuildAsSlots <span class="token operator">=</span>\n        isComponent <span class="token operator">&amp;&amp;</span>\n        <span class="token comment">// Teleport is not a real component and has dedicated runtime handling</span>\n        vnodeTag <span class="token operator">!==</span> <span class="token constant">TELEPORT</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token comment">// explained above.</span>\n        vnodeTag <span class="token operator">!==</span> <span class="token constant">KEEP_ALIVE</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBuildAsSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> slots<span class="token punctuation">,</span> hasDynamicSlots <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">buildSlots</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n        vnodeChildren <span class="token operator">=</span> slots\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">DYNAMIC_SLOTS</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> vnodeTag <span class="token operator">!==</span> <span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> <span class="token keyword">type</span> <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token keyword">type</span>\n        <span class="token comment">// check for dynamic text children 是否动态文本</span>\n        <span class="token keyword">const</span> hasDynamicTextChild <span class="token operator">=</span>\n          <span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span>\n          <span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>\n          hasDynamicTextChild <span class="token operator">&amp;&amp;</span>\n          <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">===</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// pass directly if the only child is a text node</span>\n        <span class="token comment">// (plain / interpolation / expression)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicTextChild <span class="token operator">||</span> <span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vnodeChildren <span class="token operator">=</span> child <span class="token keyword">as</span> TemplateTextChildNode\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// patchFlag &amp; dynamicPropNames</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// special flags (negative and mutually exclusive)</span>\n          vnodePatchFlag <span class="token operator">=</span> patchFlag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>PatchFlagNames<span class="token punctuation">[</span>patchFlag<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// bitwise flags</span>\n          <span class="token comment">// 计算patchFlag</span>\n          <span class="token keyword">const</span> flagNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>PatchFlagNames<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> patchFlag <span class="token operator">&amp;</span> n<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> PatchFlagNames<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          vnodePatchFlag <span class="token operator">=</span> patchFlag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">`</span></span> <span class="token comment">// &quot;TEXT, CLASS, STYLE&quot;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        vnodePatchFlag <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>patchFlag<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicPropNames <span class="token operator">&amp;&amp;</span> dynamicPropNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vnodeDynamicProps <span class="token operator">=</span> <span class="token function">stringifyDynamicPropNames</span><span class="token punctuation">(</span>dynamicPropNames<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 调用createVNodeCall确定最终要生成的代码</span>\n    node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>\n      context<span class="token punctuation">,</span>\n      vnodeTag<span class="token punctuation">,</span>\n      vnodeProps<span class="token punctuation">,</span>\n      vnodeChildren<span class="token punctuation">,</span>\n      vnodePatchFlag<span class="token punctuation">,</span>\n      vnodeDynamicProps<span class="token punctuation">,</span>\n      vnodeDirectives<span class="token punctuation">,</span>\n      <span class="token operator">!</span><span class="token operator">!</span>shouldUseBlock<span class="token punctuation">,</span>\n      <span class="token boolean">false</span> <span class="token comment">/* disableTracking */</span><span class="token punctuation">,</span>\n      node<span class="token punctuation">.</span>loc\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>transformElement</code>主要就是对组件、普通标签去做了一个转换处理，并在其内部处理了指令，并在最后调用<code>createVNodeCall</code>确定了最终要生成的代码，下一篇将对这个函数进行说明。</p>',
    5
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
