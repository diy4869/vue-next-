import { o as t, c as d, d as e } from './app.bbc322cf.js'
const r =
    '{"title":"位运算","description":"","frontmatter":{},"headers":[{"level":2,"title":"位运算","slug":"位运算"},{"level":3,"title":"按位与","slug":"按位与"},{"level":3,"title":"按位或","slug":"按位或"},{"level":3,"title":"按位异或","slug":"按位异或"},{"level":3,"title":"按位非","slug":"按位非"},{"level":3,"title":"左移","slug":"左移"},{"level":3,"title":"右移","slug":"右移"},{"level":3,"title":"无符号右移","slug":"无符号右移"}],"relativePath":"components/bitOperators.md","lastUpdated":1620567291618}',
  a = {},
  p = e(
    '<h2 id="位运算"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h2><p>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer">位运算</a></p><p>JS对数字的存储是以<code>IEEE-754</code> 64位格式进行存储的，但是位运算并不会直接操作64位的值，而是先将64位转成32位进行计算，最后在将结果转换为64位。 如果转成2进制不足32位，则会转成先转成32位进行计算，不足的部分用0进行填充。如果超过则丢弃不要</p><html><table><tr><td>语法</td><td width="100">例子</td><td>描述</td></tr><tr><td>按位与 AND</td><td>a &amp; b</td><td>在a，b的位表示中，每一个对应的位都为1则返回1， 否则返回0</td></tr><tr><td>按位或 OR</td><td>a | b</td><td>在a，b的位表示中，每一个对应的位，只要有一个为1则返回1， 否则返回0</td></tr><tr><td>按位异或 XOR</td><td>a ^ b</td><td>在a，b的位表示中，每一个对应的位，两个不相同则返回1，相同则返回0</td></tr><tr><td>按位非 NOT</td><td>~a</td><td>对每位进行取反</td></tr><tr><td>左移</td><td>a &lt;&lt; b</td><td><p>将a的二进制串向左移动b位，低位空缺补0，高位溢出不要</p><p>左移不考虑正负数</p></td></tr><tr><td>右移</td><td>a &gt;&gt; b</td><td><p>把a的二进制表示向右移动b位</p><p>正数 右移的时候，最高位补0，低位舍去</p><p>负数 右移的时候，最高位补1，低位舍去</p></td></tr><tr><td><span>无符号右移</span><p>(左边空出位用0填充)</p></td><td>a &gt;&gt;&gt; b</td><td>把a的二进制表示向右移动b位，溢出舍去，高位补0（不处理正负数，高位不0）</td></tr></table></html><h3 id="按位与"><a class="header-anchor" href="#按位与" aria-hidden="true">#</a> 按位与</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>5 &amp; 5</td><td><p>101</p><p>101</p></td><td>5</td></tr><tr><td>5 &amp; 10</td><td><p>101</p><p>1010</p></td><td>0</td></tr></table></html><h3 id="按位或"><a class="header-anchor" href="#按位或" aria-hidden="true">#</a> 按位或</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>10 | 22</td><td><p>1010</p><p>10110</p></td><td><p>30</p><p>11110</p></td></tr></table></html><h3 id="按位异或"><a class="header-anchor" href="#按位异或" aria-hidden="true">#</a> 按位异或</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>10 | 22</td><td><p>1010</p><p>10110</p></td><td><p>30</p><p>11100</p></td></tr></table></html><h3 id="按位非"><a class="header-anchor" href="#按位非" aria-hidden="true">#</a> 按位非</h3><p>注意：</p><ul><li>在进行按位非运算时，所有数字的计算结果都是<code>~(x + 1)</code></li><li><p>由于对数字<code>~-1</code>和<code>~4294967295</code> (2<sup>32</sup>-1) 使用32位表示形式，结果均为0。</p></li></ul><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>~10</td><td><p>1011</p></td><td><p>-11</p><p>0100</p></td></tr></table></html><h3 id="左移"><a class="header-anchor" href="#左移" aria-hidden="true">#</a> 左移</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>2 &lt;&lt; 2 </td><td><p>2</p><p>00000000000000000000000000000010</p></td><td><p>8</p><p>00000000000000000000000000001000</p></td></tr></table></html><h3 id="右移"><a class="header-anchor" href="#右移" aria-hidden="true">#</a> 右移</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>10 &gt;&gt; 2 </td><td><p>10</p><p>00000000000000000000000000001010</p></td><td><p>2</p><p>00000000000000000000000000000010</p></td></tr></table></html><h3 id="无符号右移"><a class="header-anchor" href="#无符号右移" aria-hidden="true">#</a> 无符号右移</h3><html><table><tr><td>例子</td><td width="100">二进制</td><td>结果</td></tr><tr><td>54 &gt;&gt;&gt; 2 </td><td><p>54</p><p>00000000000000000000000000110110</p></td><td><p>13</p><p>00000000000000000000000000001101</p></td></tr></table></html>',
    20
  )
a.render = function(e, r, a, l, h, i) {
  return t(), d('div', null, [p])
}
export default a
export { r as __pageData }
