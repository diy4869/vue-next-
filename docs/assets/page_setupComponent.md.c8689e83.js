import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"setupComponent 安装组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"setupComponent 安装组件","slug":"setupcomponent-安装组件"},{"level":3,"title":"获取setup状态","slug":"获取setup状态"},{"level":3,"title":"对setup返回的结果进行处理","slug":"对setup返回的结果进行处理"},{"level":3,"title":"finishComponentSetup 完成组件设置","slug":"finishcomponentsetup-完成组件设置"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"page/setupComponent.md","lastUpdated":1625985077920}',
  p = {},
  o = a(
    '<h2 id="setupcomponent-安装组件"><a class="header-anchor" href="#setupcomponent-安装组件" aria-hidden="true">#</a> setupComponent 安装组件</h2><p>这部分代码在<code>packages/runtime-core/src/renderer.ts</code></p><p><code>setupComponent</code>首先从<code>Vnode</code>获取<code>props、children</code>，并对<code>props、children</code>做了初始化。并判断是否有状态，有就执行<code>setupStatefulComponent</code>，否则就为<code>undefined</code>，并最终返回<code>setup</code>函数执行结果。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span>\n  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  isSSR <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  isInSSRComponentSetup <span class="token operator">=</span> isSSR\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode\n  <span class="token comment">// 是否是有状态的组件</span>\n  <span class="token keyword">const</span> isStateful <span class="token operator">=</span> <span class="token function">isStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">,</span> isStateful<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n  <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> setupResult <span class="token operator">=</span> isStateful\n    <span class="token operator">?</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token keyword">undefined</span>\n  isInSSRComponentSetup <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">return</span> setupResult\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="获取setup状态"><a class="header-anchor" href="#获取setup状态" aria-hidden="true">#</a> 获取setup状态</h3><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>\n  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ComponentOptions\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果存在组件名称</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">validateComponentName</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 如果有注册组件，则进行校验</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>components<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> names <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>components<span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">validateComponentName</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 如果有注册指令</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> names <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>directives<span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">validateDirectiveName</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>compilerOptions <span class="token operator">&amp;&amp;</span> <span class="token function">isRuntimeOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;compilerOptions&quot; is only supported when using a build of Vue that </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">includes the runtime compiler. Since you are using a runtime-only </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">build, the options should be passed via your build tool config instead.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 0. create render proxy property access cache</span>\n  instance<span class="token punctuation">.</span>accessCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token comment">// 1. create public instance / render proxy</span>\n  <span class="token comment">// also mark it raw so it&#39;s never observed</span>\n  instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> PublicInstanceProxyHandlers<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">exposePropsOnRenderContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 2. call setup()</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token operator">=</span> Component\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>setupContext <span class="token operator">=</span>\n      setup<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">createSetupContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n\n    currentInstance <span class="token operator">=</span> instance\n    <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 调用组件内的setup函数执行，并拿到返回结果</span>\n    <span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>\n      setup<span class="token punctuation">,</span>\n      instance<span class="token punctuation">,</span>\n      ErrorCodes<span class="token punctuation">.</span><span class="token constant">SETUP_FUNCTION</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span>__DEV__ <span class="token operator">?</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token operator">:</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> setupContext<span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n    <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    currentInstance <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token comment">// 如果setup返回的结果是promise</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果是服务端渲染</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 返回Promise 以便在SSR期间处理</span>\n        <span class="token keyword">return</span> setupResult\n          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolvedResult<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> resolvedResult<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">SETUP_FUNCTION</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 否则</span>\n      <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 完成组件安装</span>\n    <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="对setup返回的结果进行处理"><a class="header-anchor" href="#对setup返回的结果进行处理" aria-hidden="true">#</a> 对setup返回的结果进行处理</h3><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>\n  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  setupResult<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// setup可能返回一个render function</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// setup returned an inline render function 如果是node ssr，则返回一个内联渲染函数</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__NODE_JS__ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ComponentOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>__ssrInlineRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// when the function&#39;s name is `ssrRender` (compiled by SFC inline mode),</span>\n      <span class="token comment">// set it as ssrRender instead.</span>\n      instance<span class="token punctuation">.</span>ssrRender <span class="token operator">=</span> setupResult\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      instance<span class="token punctuation">.</span>render <span class="token operator">=</span> setupResult <span class="token keyword">as</span> InternalRenderFunction\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果是vnode</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">isVNode</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// setup不应返回一个vnode 应该是render function</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setup() should not return VNodes directly - </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return a render function instead.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// setup returned bindings.</span>\n    <span class="token comment">// assuming a render function compiled from template is present.</span>\n    <span class="token comment">// 如果存在devtools 就把setup返回结果赋值给devtoolsRawSetupState</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">||</span> __FEATURE_PROD_DEVTOOLS__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      instance<span class="token punctuation">.</span>devtoolsRawSetupState <span class="token operator">=</span> setupResult\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这步会把setup的返回结果在进一步通过proxy进行包装</span>\n    instance<span class="token punctuation">.</span>setupState <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">exposeSetupStateOnRenderContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> setupResult <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setup() should return an object. Received: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        setupResult <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;null&#39;</span> <span class="token operator">:</span> <span class="token keyword">typeof</span> setupResult\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 完成组件安装</span>\n  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="finishcomponentsetup-完成组件设置"><a class="header-anchor" href="#finishcomponentsetup-完成组件设置" aria-hidden="true">#</a> finishComponentSetup 完成组件设置</h3><p><code>finishComponentSetup</code>这块，主要完成了组件的安装处理，并初始化了编译选项，对<code>setup</code>返回<code>render Function</code>和普通结果做了处理。并对v2做了兼容处理。</p><div class="language-ts"><pre><code><span class="token comment">// 完成组件设置</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>\n  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n  skipOptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ComponentOptions\n\n  <span class="token comment">// 针对v2进行兼容</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">convertLegacyRenderFn</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> Component<span class="token punctuation">.</span>compatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">validateCompatConfig</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>compatConfig<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// template / render function normalization</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__NODE_JS__ <span class="token operator">&amp;&amp;</span> isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 1. the render function may already exist, returned by `setup`</span>\n    <span class="token comment">// 2. otherwise try to use the `Component.render`</span>\n    <span class="token comment">// 3. if the component doesn&#39;t have a render function,</span>\n    <span class="token comment">//    set `instance.render` to NOOP so that it can inherit the render</span>\n    <span class="token comment">//    function from mixins/extend</span>\n    <span class="token comment">// render函数可能由setup进行返回，否则就用Component.render</span>\n    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render <span class="token operator">||</span>\n      Component<span class="token punctuation">.</span>render <span class="token operator">||</span>\n      <span class="token constant">NOOP</span><span class="token punctuation">)</span> <span class="token keyword">as</span> InternalRenderFunction\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// could be set from setup()</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>compile <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Component<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 获取模板</span>\n      <span class="token keyword">const</span> template <span class="token operator">=</span>\n        <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span>\n          instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span>\n          instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">[</span><span class="token string">&#39;inline-template&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n        Component<span class="token punctuation">.</span>template\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 编译性能统计</span>\n          <span class="token function">startMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">compile</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> isCustomElement<span class="token punctuation">,</span> compilerOptions <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>\n          delimiters<span class="token punctuation">,</span>\n          compilerOptions<span class="token operator">:</span> componentCompilerOptions\n        <span class="token punctuation">}</span> <span class="token operator">=</span> Component\n        <span class="token comment">// 合并最终编译选项</span>\n        <span class="token keyword">const</span> finalCompilerOptions<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>\n          <span class="token function">extend</span><span class="token punctuation">(</span>\n            <span class="token punctuation">{</span>\n              isCustomElement<span class="token punctuation">,</span>\n              delimiters\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            compilerOptions\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          componentCompilerOptions\n        <span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// pass runtime compat config into the compiler</span>\n          finalCompilerOptions<span class="token punctuation">.</span>compatConfig <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>globalCompatConfig<span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>compatConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">extend</span><span class="token punctuation">(</span>finalCompilerOptions<span class="token punctuation">.</span>compatConfig<span class="token punctuation">,</span> Component<span class="token punctuation">.</span>compatConfig<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 编译模板 生成render function，这一步只是生成了createVnode</span>\n        Component<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> finalCompilerOptions<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 编译结束</span>\n          <span class="token function">endMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">compile</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>render <span class="token operator">||</span> <span class="token constant">NOOP</span><span class="token punctuation">)</span> <span class="token keyword">as</span> InternalRenderFunction\n\n    <span class="token comment">// for runtime-compiled render functions using `with` blocks, the render</span>\n    <span class="token comment">// proxy used needs a different `has` handler which is more performant and</span>\n    <span class="token comment">// also only allows a whitelist of globals to fallthrough.</span>\n    <span class="token comment">/**\n     * vue在生成render function的时候，vue是通过new Function() 实现的\n     * 从而通过需要proxy 进行代理 提高性能\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">.</span>_rc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      instance<span class="token punctuation">.</span>withProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>\n        instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>\n        RuntimeCompiledPublicInstanceProxyHandlers\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// support for 2.x options</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_OPTIONS_API__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> skipOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    currentInstance <span class="token operator">=</span> instance\n    <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Component<span class="token punctuation">)</span>\n    <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    currentInstance <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// warn missing template/render</span>\n  <span class="token comment">// the runtime compilation of template in SSR is done by server-render</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Component<span class="token punctuation">.</span>render <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>render <span class="token operator">===</span> <span class="token constant">NOOP</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>compile <span class="token operator">&amp;&amp;</span> Component<span class="token punctuation">.</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Component provided template option but </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">runtime compilation is not supported in this build of Vue.</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token punctuation">(</span>__ESM_BUNDLER__\n            <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> Configure your bundler to alias &quot;vue&quot; to &quot;vue/dist/vue.esm-bundler.js&quot;.</span><span class="token template-punctuation string">`</span></span>\n            <span class="token operator">:</span> __ESM_BROWSER__\n              <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> Use &quot;vue.esm-browser.js&quot; instead.</span><span class="token template-punctuation string">`</span></span>\n              <span class="token operator">:</span> __GLOBAL__\n                <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> Use &quot;vue.global.js&quot; instead.</span><span class="token template-punctuation string">`</span></span>\n                <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">/* should not happen */</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Component is missing template or render function.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>至此，组件已经完成安装，下一部分将开始说明<code>template</code>是如何编译的，需要懂一点简单的编译原理。由于本人例子是通过template实现的，所以和直接返回<code>render Function</code>的会有部分区别，可能以后会去写<code>render Function</code>的处理方案吧。</p><p><a href="/compiler/baseCompile.html">组件编译过程传送门</a></p>',
    14
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
