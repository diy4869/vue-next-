import { o as n, c as s, a } from './app.547ab472.js'
const p =
    '{"title":"解析标签","description":"","frontmatter":{},"headers":[{"level":2,"title":"解析标签","slug":"解析标签"}],"relativePath":"compiler/parseElement.md","lastUpdated":1641357564053}',
  t = {},
  o = a(
    '<h2 id="解析标签"><a class="header-anchor" href="#解析标签" aria-hidden="true">#</a> 解析标签</h2><p><code>element</code>的一个类型描述</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ElementNode</span> <span class="token operator">=</span>\n  <span class="token operator">|</span> PlainElementNode\n  <span class="token operator">|</span> ComponentNode\n  <span class="token operator">|</span> SlotOutletNode\n  <span class="token operator">|</span> TemplateNode\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes\n  loc<span class="token operator">:</span> SourceLocation\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BaseElementNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>\n  ns<span class="token operator">:</span> Namespace\n  tag<span class="token operator">:</span> <span class="token builtin">string</span>\n  tagType<span class="token operator">:</span> ElementTypes\n  isSelfClosing<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  props<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>AttributeNode <span class="token operator">|</span> DirectiveNode<span class="token operator">&gt;</span>\n  children<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PlainElementNode</span> <span class="token keyword">extends</span> <span class="token class-name">BaseElementNode</span> <span class="token punctuation">{</span>\n  tagType<span class="token operator">:</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>\n  codegenNode<span class="token operator">:</span>\n    <span class="token operator">|</span> VNodeCall\n    <span class="token operator">|</span> SimpleExpressionNode <span class="token comment">// when hoisted</span>\n    <span class="token operator">|</span> CacheExpression <span class="token comment">// when cached by v-once</span>\n    <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  ssrCodegenNode<span class="token operator">?</span><span class="token operator">:</span> TemplateLiteral\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentNode</span> <span class="token keyword">extends</span> <span class="token class-name">BaseElementNode</span> <span class="token punctuation">{</span>\n  tagType<span class="token operator">:</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>\n  codegenNode<span class="token operator">:</span>\n    <span class="token operator">|</span> VNodeCall\n    <span class="token operator">|</span> CacheExpression <span class="token comment">// when cached by v-once</span>\n    <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  ssrCodegenNode<span class="token operator">?</span><span class="token operator">:</span> CallExpression\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SlotOutletNode</span> <span class="token keyword">extends</span> <span class="token class-name">BaseElementNode</span> <span class="token punctuation">{</span>\n  tagType<span class="token operator">:</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">SLOT</span>\n  codegenNode<span class="token operator">:</span>\n    <span class="token operator">|</span> RenderSlotCall\n    <span class="token operator">|</span> CacheExpression <span class="token comment">// when cached by v-once</span>\n    <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  ssrCodegenNode<span class="token operator">?</span><span class="token operator">:</span> CallExpression\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TemplateNode</span> <span class="token keyword">extends</span> <span class="token class-name">BaseElementNode</span> <span class="token punctuation">{</span>\n  tagType<span class="token operator">:</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">TEMPLATE</span>\n  <span class="token comment">// TemplateNode is a container type that always gets compiled away</span>\n  codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>具体实现</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>\n  __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Start tag.</span>\n  <span class="token keyword">const</span> wasInPre <span class="token operator">=</span> context<span class="token punctuation">.</span>inPre\n  <span class="token keyword">const</span> wasInVPre <span class="token operator">=</span> context<span class="token punctuation">.</span>inVPre\n  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span>\n  <span class="token comment">// 解析标签</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>Start<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> isPreBoundary <span class="token operator">=</span> context<span class="token punctuation">.</span>inPre <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>wasInPre\n  <span class="token keyword">const</span> isVPreBoundary <span class="token operator">=</span> context<span class="token punctuation">.</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>wasInVPre\n\n  <span class="token comment">// 如果是单标签或空标签直接返回</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>isSelfClosing <span class="token operator">||</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">isVoidTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> element\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Children. 否则添加子元素</span>\n  ancestors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> mode <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getTextMode</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span>\n  ancestors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 2.x inline-template compat v2兼容处理</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> inlineTemplateProp <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n      p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;inline-template&#39;</span>\n    <span class="token punctuation">)</span> <span class="token keyword">as</span> AttributeNode\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      inlineTemplateProp <span class="token operator">&amp;&amp;</span>\n      <span class="token function">checkCompatEnabled</span><span class="token punctuation">(</span>\n        CompilerDeprecationTypes<span class="token punctuation">.</span><span class="token constant">COMPILER_INLINE_TEMPLATE</span><span class="token punctuation">,</span>\n        context<span class="token punctuation">,</span>\n        inlineTemplateProp<span class="token punctuation">.</span>loc\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      inlineTemplateProp<span class="token punctuation">.</span>value<span class="token operator">!</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">,</span>\n        element<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>end\n      <span class="token punctuation">)</span><span class="token punctuation">.</span>source\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  element<span class="token punctuation">.</span>children <span class="token operator">=</span> children\n\n  <span class="token comment">// End tag.</span>\n  <span class="token comment">// 如果是结束标签</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWithEndTagOpen</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MISSING_END_TAG</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> element<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> first <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  element<span class="token punctuation">.</span>loc <span class="token operator">=</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> element<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPreBoundary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>inPre <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isVPreBoundary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>inVPre <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> element\n<span class="token punctuation">}</span>\n</code></pre></div>',
    5
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
