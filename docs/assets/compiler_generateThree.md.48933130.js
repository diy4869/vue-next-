import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"模板转换 render function","description":"","frontmatter":{},"headers":[{"level":2,"title":"模板转换 render function","slug":"模板转换-render-function"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/generateThree.md","lastUpdated":1641357564052}',
  p = {},
  o = a(
    '<h2 id="模板转换-render-function"><a class="header-anchor" href="#模板转换-render-function" aria-hidden="true">#</a> 模板转换 render function</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>\n  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> CompilerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> RenderFunction <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n\n  <span class="token comment">// 编译模板，生成代码</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>\n    template<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span>\n        hoistStatic<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        onError<span class="token operator">:</span> __DEV__ <span class="token operator">?</span> onError <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n        onWarn<span class="token operator">:</span> __DEV__ <span class="token operator">?</span> e <span class="token operator">=&gt;</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">NOOP</span>\n      <span class="token punctuation">}</span> <span class="token keyword">as</span> CompilerOptions<span class="token punctuation">,</span>\n      options\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token operator">:</span> CompilerError<span class="token punctuation">,</span> asWarning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> message <span class="token operator">=</span> asWarning\n      <span class="token operator">?</span> err<span class="token punctuation">.</span>message\n      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Template compilation error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">const</span> codeFrame <span class="token operator">=</span>\n      err<span class="token punctuation">.</span>loc <span class="token operator">&amp;&amp;</span>\n      <span class="token function">generateCodeFrame</span><span class="token punctuation">(</span>\n        template <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n        err<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>\n        err<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>end<span class="token punctuation">.</span>offset\n      <span class="token punctuation">)</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>codeFrame <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>codeFrame<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> message<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// The wildcard import results in a huge object with every export</span>\n  <span class="token comment">// with keys that cannot be mangled, and can be quite heavy size-wise.</span>\n  <span class="token comment">// In the global build we know `Vue` is available globally so we can avoid</span>\n  <span class="token comment">// the wildcard object.</span>\n  <span class="token comment">// 生成的代码通过new Function进行包装</span>\n  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span>__GLOBAL__\n    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">(</span><span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">(</span>runtimeDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> RenderFunction\n\n  <span class="token comment">// mark the function as runtime compiled 标记为运行时已编译</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>render <span class="token keyword">as</span> InternalRenderFunction<span class="token punctuation">)</span><span class="token punctuation">.</span>_rc <span class="token operator">=</span> <span class="token boolean">true</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>compileCache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> render<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>可以看到最后对生成的代码通过<code>new Function</code>去做了一层包装，并返回了出去，简单看下最终生成的代码：</p><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createVNode<span class="token operator">:</span> _createVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue\n\n  <span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;suspense&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;supense组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;telport组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">with</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>\n        createVNode <span class="token keyword">as</span> _createVNode<span class="token punctuation">,</span>\n        vModelText <span class="token keyword">as</span> _vModelText<span class="token punctuation">,</span>\n        withDirectives <span class="token keyword">as</span> _withDirectives<span class="token punctuation">,</span>\n        resolveComponent <span class="token keyword">as</span> _resolveComponent<span class="token punctuation">,</span>\n        renderList <span class="token keyword">as</span> _renderList<span class="token punctuation">,</span>\n        Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span>\n        openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>\n        createBlock <span class="token keyword">as</span> _createBlock<span class="token punctuation">,</span>\n        Suspense <span class="token keyword">as</span> _Suspense<span class="token punctuation">,</span>\n        withCtx <span class="token keyword">as</span> _withCtx<span class="token punctuation">,</span>\n        Teleport <span class="token keyword">as</span> _Teleport\n      <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue\n\n      <span class="token keyword">const</span> _component_test <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n        <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n          <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token keyword">class</span><span class="token operator">:</span> count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>\n            style<span class="token operator">:</span> <span class="token string">&#39;font-size: 14px; font-weight: bold;&#39;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token comment">/* TEXT, CLASS, STYLE */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">_withDirectives</span><span class="token punctuation">(</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            ref<span class="token operator">:</span> <span class="token string">&quot;inputRef&quot;</span><span class="token punctuation">,</span>\n            <span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>inputVal <span class="token operator">=</span> $event<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">[</span>_vModelText<span class="token punctuation">,</span> inputVal<span class="token punctuation">]</span>\n          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            onClick<span class="token operator">:</span> add<span class="token punctuation">,</span>\n            style<span class="token operator">:</span> <span class="token punctuation">{</span>\n                color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;增加&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token comment">/* STYLE, PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;onClick&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">_createVNode</span><span class="token punctuation">(</span>_component_test<span class="token punctuation">,</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> count <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">(</span>\n              <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n              <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> \n              <span class="token function">_renderList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token comment">// v-for生成的代码</span>\n                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span> <span class="token comment">/* UNKEYED_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Suspense<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n              _hoisted_1\n            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            _<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* STABLE */</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Teleport<span class="token punctuation">,</span> <span class="token punctuation">{</span> to<span class="token operator">:</span> <span class="token string">&quot;body #suspense&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n            _hoisted_2\n          <span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',
    5
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
