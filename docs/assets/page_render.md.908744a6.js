import { o as n, c as s, a } from './app.03151976.js'
const p =
    '{"title":"render","description":"","frontmatter":{},"headers":[{"level":2,"title":"render","slug":"render"},{"level":3,"title":"baseCreateRenderer","slug":"basecreaterenderer"},{"level":3,"title":"patch","slug":"patch"},{"level":3,"title":"processComponent","slug":"processcomponent"}],"relativePath":"page/render.md","lastUpdated":1625465400200}',
  t = {},
  o = a(
    '<h2 id="render"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h2><p>本篇属于渲染部分，该内容过于硬核，源码一个函数长达2k行将近。这部分也会涉及到diff更新对比计算。这部分源码在<code>packages/runtime-core/src/renderer.ts</code></p><h3 id="basecreaterenderer"><a class="header-anchor" href="#basecreaterenderer" aria-hidden="true">#</a> baseCreateRenderer</h3><p>在上一部分，<code>mount</code>内部去调用了<code>render</code>，而这个<code>render</code>就是<code>baseCreateRenderer</code>返回的，在<a href="/page/createApp.html"> createApp </a>这一部分也简单提到过，现在就来具体看下这玩意。</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> RendererOptions<span class="token punctuation">,</span>\n  createHydrationFns<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> createHydrationFunctions\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> render<span class="token operator">:</span> <span class="token function-variable function">RootRenderFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果vnode不存在</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">unmount</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>_vnode <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    container<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    render<span class="token punctuation">,</span> <span class="token comment">// 渲染相关</span>\n    hydrate<span class="token punctuation">,</span> <span class="token comment">// SSR</span>\n    createApp<span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span> <span class="token comment">// creteApp本体</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>由于是首次渲染，<code>Vnode</code>肯定会存在，而且在<code>mount</code>的时候，已经创建过一个<code>Vnode</code>，所以现在直接来看<code>patch</code>。</p><h3 id="patch"><a class="header-anchor" href="#patch" aria-hidden="true">#</a> patch</h3><p>可以看到官方通过<a href="/page/bitOperators.html#shapflags"> shapeFlag </a>来判断当前类型，由于是首次，所以直接执行<code>processComponent</code>。</p><div class="language-ts"><pre><code>  <span class="token comment">/**\n   * Note: functions inside this closure should use `const xxx = () =&gt; {}`\n   * style in order to prevent being inlined by minifiers.\n   * n1 旧节点\n   * n2 新节点\n   * anchor telport相关\n  */</span>\n  <span class="token keyword">const</span> patch<span class="token operator">:</span> <span class="token function-variable function">PatchFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    n1<span class="token punctuation">,</span>\n    n2<span class="token punctuation">,</span>\n    container<span class="token punctuation">,</span>\n    anchor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    parentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    parentSuspense <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    isSVG <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    slotScopeIds <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    optimized <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">type</span><span class="token punctuation">,</span> ref<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> n2\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// type为vnode的类型，首次为component</span>\n      <span class="token comment">// ...</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">processComponent</span><span class="token punctuation">(</span>\n            n1<span class="token punctuation">,</span>\n            n2<span class="token punctuation">,</span>\n            container<span class="token punctuation">,</span>\n            anchor<span class="token punctuation">,</span>\n            parentComponent<span class="token punctuation">,</span>\n            parentSuspense<span class="token punctuation">,</span>\n            isSVG<span class="token punctuation">,</span>\n            slotScopeIds<span class="token punctuation">,</span>\n            optimized\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ...</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid VNode type:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">typeof</span> <span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="processcomponent"><a class="header-anchor" href="#processcomponent" aria-hidden="true">#</a> processComponent</h3><p>processComponent具体也就判断旧节点是否为空，然后判断是否为<code>keepAlive</code>组件，否则就挂载组件</p><div class="language-ts"><pre><code>  <span class="token keyword">const</span> <span class="token function-variable function">processComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    n1<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    n2<span class="token operator">:</span> VNode<span class="token punctuation">,</span>\n    container<span class="token operator">:</span> RendererElement<span class="token punctuation">,</span>\n    anchor<span class="token operator">:</span> RendererNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    parentComponent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    parentSuspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    isSVG<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n    slotScopeIds<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    optimized<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    n2<span class="token punctuation">.</span>slotScopeIds <span class="token operator">=</span> slotScopeIds\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 是否keepAlive组件</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_KEPT_ALIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">;</span><span class="token punctuation">(</span>parentComponent<span class="token operator">!</span><span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>\n          n2<span class="token punctuation">,</span>\n          container<span class="token punctuation">,</span>\n          anchor<span class="token punctuation">,</span>\n          isSVG<span class="token punctuation">,</span>\n          optimized\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 挂载组件</span>\n        <span class="token function">mountComponent</span><span class="token punctuation">(</span>\n          n2<span class="token punctuation">,</span>\n          container<span class="token punctuation">,</span>\n          anchor<span class="token punctuation">,</span>\n          parentComponent<span class="token punctuation">,</span>\n          parentSuspense<span class="token punctuation">,</span>\n          isSVG<span class="token punctuation">,</span>\n          optimized\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">updateComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> optimized<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>这部分暂时先到这里，下一部分来看组件是怎么挂载的。</p>',
    13
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
