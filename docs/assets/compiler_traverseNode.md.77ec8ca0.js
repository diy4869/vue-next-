import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"traverseNode 转换节点","description":"","frontmatter":{},"headers":[{"level":2,"title":"traverseNode 转换节点","slug":"traversenode-转换节点"},{"level":2,"title":"traverseChildren 转换子节点数组","slug":"traversechildren-转换子节点数组"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/traverseNode.md","lastUpdated":1641357564057}',
  p = {},
  o = a(
    '<h2 id="traversenode-转换节点"><a class="header-anchor" href="#traversenode-转换节点" aria-hidden="true">#</a> traverseNode 转换节点</h2><p>上一篇对<code>createTransformContext</code>做了简单说明，这一篇来针对节点是如何转换的，做一个大概的说明，常用的指令也是在这一过程进行转换的。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>\n  node<span class="token operator">:</span> RootNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> TransformContext\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node\n  <span class="token comment">/**\n   * 应用转换函数，vue-next会对每个标签解析好的AST，依次调用对应的转换函数\n   * 部分函数在调用的时候会返回一个新的函数，该函数将等待所有转换完成后，重新执行 \n   */</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> nodeTransforms <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">const</span> exitFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token comment">/**\n   * 内置的一些转换函数\n   * \n   * 0 transformOnce\n   * 1 createStructuralDirectiveTransform\n   * 2 createStructuralDirectiveTransform\n   * 3 transformExpression\n   * 4 transformSlotOutlet\n   * 5 transformElement\n   * 6 trackSlotScopes\n   * 7 transformText\n   * 8 ignoreSideEffectTags\n   * 9 transformStyle\n   * 10 warnTransitionChildren\n   * \n   * on for if model bind等会在transformElement进行处理\n   */</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodeTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取每次执行完成后所返回的一个函数，可能为null</span>\n    <span class="token keyword">const</span> onExit <span class="token operator">=</span> nodeTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> \n\n    <span class="token comment">// 如果返回了一个新函数，就将其添加到数组内，用于在所有转换函数执行完成后执行</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>onExit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>onExit<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>currentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// node was removed 节点被删除</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// node may have been replaced 节点可能被替换</span>\n      node <span class="token operator">=</span> context<span class="token punctuation">.</span>currentNode\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span> <span class="token comment">// 3</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// inject import for the Comment symbol, which is needed for creating</span>\n        <span class="token comment">// comment nodes with `createVNode`</span>\n        context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_COMMENT</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span> <span class="token comment">// 5</span>\n      <span class="token comment">// no need to traverse, but we need to inject toString helper</span>\n      <span class="token comment">// 不需要遍历 但是需要tostring</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">break</span>\n\n    <span class="token comment">// for container types, further traverse downwards</span>\n    <span class="token comment">// 针对v-if 将继续执行转换过程</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token operator">:</span> <span class="token comment">// 9</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>branches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">traverseNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>branches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token operator">:</span> <span class="token comment">// 如果是 0 就继续执行转换</span>\n      <span class="token function">traverseChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// exit transforms  退出之前，对未转换的AST节点执行转换</span>\n  context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node <span class="token comment">// 设置当前执行的AST节点</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length\n  <span class="token comment">/**\n   * 对上一步返回的函数进行执行，这里是为了确保执行顺序，所以是倒序执行的\n   * \n   * 确保最后一步执行的时候，transformElement已经被执行，是因为指令是在transformElement进行处理的\n   * */</span> \n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="traversechildren-转换子节点数组"><a class="header-anchor" href="#traversechildren-转换子节点数组" aria-hidden="true">#</a> traverseChildren 转换子节点数组</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverseChildren</span><span class="token punctuation">(</span>\n  parent<span class="token operator">:</span> ParentNode<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> TransformContext\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">nodeRemoved</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    i<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 对子节点数组进行遍历</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token comment">// 是否为string</span>\n    context<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent <span class="token comment">// 设置当前转换的父节点</span>\n    context<span class="token punctuation">.</span>childIndex <span class="token operator">=</span> i <span class="token comment">// 设置当前转换的index</span>\n    context<span class="token punctuation">.</span>onNodeRemoved <span class="token operator">=</span> nodeRemoved\n    <span class="token function">traverseNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token comment">// 转换节点</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>整体的转换流程就是这样，由于转换的内容较多（懒，且能力有限），将不做具体说明，这里只针对<code>transformElement</code>做一个大概说明即可。</p>',
    7
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
