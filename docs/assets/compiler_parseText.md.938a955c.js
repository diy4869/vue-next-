import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"解析文本","description":"","frontmatter":{},"headers":[{"level":2,"title":"解析文本","slug":"解析文本"},{"level":2,"title":"解析模板语法","slug":"解析模板语法"}],"relativePath":"compiler/parseText.md","lastUpdated":1625572150278}',
  p = {},
  o = a(
    '<h2 id="解析文本"><a class="header-anchor" href="#解析文本" aria-hidden="true">#</a> 解析文本</h2><div class="language-ts"><pre><code><span class="token comment">// 解析文本</span>\n<span class="token keyword">function</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span> mode<span class="token operator">:</span> TextModes<span class="token punctuation">)</span><span class="token operator">:</span> TextNode <span class="token punctuation">{</span>\n  __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> endTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">CDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    endTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;]]&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> endIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token comment">// 结束位置</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endTokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> index <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endTokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> endIndex <span class="token operator">&gt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      endIndex <span class="token operator">=</span> index\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span>endIndex <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n   <span class="token comment">// 通过对endTokens循环判断就能知道结束的位置</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>\n    content<span class="token punctuation">,</span>\n    loc<span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * Get text data with a given length from the current location.\n * This translates HTML entities in the text data.\n */</span>\n<span class="token comment">// 获取文本数据</span>\n<span class="token keyword">function</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> TextModes\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> rawText <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token comment">// 获取文本内容</span>\n  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token comment">// 前进</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RAWTEXT</span> <span class="token operator">||</span>\n    mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">CDATA</span> <span class="token operator">||</span>\n    rawText<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> rawText\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// DATA or RCDATA containing &quot;&amp;&quot;&quot;. Entity decoding required.</span>\n    <span class="token keyword">return</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">decodeEntities</span><span class="token punctuation">(</span>\n      rawText<span class="token punctuation">,</span>\n      mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_VALUE</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="解析模板语法"><a class="header-anchor" href="#解析模板语法" aria-hidden="true">#</a> 解析模板语法</h2><div class="language-ts"><pre><code><span class="token comment">// 解析{{}}</span>\n\n<span class="token keyword">function</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> TextModes\n<span class="token punctuation">)</span><span class="token operator">:</span> InterpolationNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> close<span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters\n  __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> open<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>close<span class="token punctuation">,</span> open<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 拿到结束位置</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>closeIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果为 -1就抛出错误</span>\n    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MISSING_INTERPOLATION_END</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// 获取开始的位置</span>\n  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> open<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 前进</span>\n  <span class="token keyword">const</span> innerStart <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">//开始解析的位置</span>\n  <span class="token keyword">const</span> innerEnd <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// 结束解析的位置</span>\n  <span class="token keyword">const</span> rawContentLength <span class="token operator">=</span> closeIndex <span class="token operator">-</span> open<span class="token punctuation">.</span>length <span class="token comment">// 获取文本长度</span>\n  <span class="token keyword">const</span> rawContent <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rawContentLength<span class="token punctuation">)</span> <span class="token comment">// 获取文本内容</span>\n  <span class="token keyword">const</span> preTrimContent <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> rawContentLength<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> preTrimContent<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 去除空格</span>\n  <span class="token keyword">const</span> startOffset <span class="token operator">=</span> preTrimContent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>startOffset <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">advancePositionWithMutation</span><span class="token punctuation">(</span>innerStart<span class="token punctuation">,</span> rawContent<span class="token punctuation">,</span> startOffset<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> endOffset <span class="token operator">=</span>\n    rawContentLength <span class="token operator">-</span> <span class="token punctuation">(</span>preTrimContent<span class="token punctuation">.</span>length <span class="token operator">-</span> content<span class="token punctuation">.</span>length <span class="token operator">-</span> startOffset<span class="token punctuation">)</span> <span class="token comment">// 结束位置</span>\n  <span class="token function">advancePositionWithMutation</span><span class="token punctuation">(</span>innerEnd<span class="token punctuation">,</span> rawContent<span class="token punctuation">,</span> endOffset<span class="token punctuation">)</span>\n  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> close<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>\n      isStatic<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token comment">// Set `isConstant` to false by default and will decide in transformExpression</span>\n      constType<span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">,</span>\n      content<span class="token punctuation">,</span>\n      loc<span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> innerStart<span class="token punctuation">,</span> innerEnd<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    loc<span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    4
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
