import { o as n, c as s, a } from './app.015d3e56.js'
const t =
    '{"title":"解析属性","description":"","frontmatter":{},"headers":[{"level":2,"title":"解析属性","slug":"解析属性"},{"level":2,"title":"解析属性值","slug":"解析属性值"},{"level":2,"title":"获取解析到的key和属性","slug":"获取解析到的key和属性"}],"relativePath":"compiler/parseAttribute.md","lastUpdated":1625569843888}',
  p = {},
  o = a(
    '<p>上一篇简单的介绍了下标签是怎么被解析的，但是没有说属性是怎么处理的，这一部分来看如何解析属性</p><h2 id="解析属性"><a class="header-anchor" href="#解析属性" aria-hidden="true">#</a> 解析属性</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseAttribute</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  nameSet<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> AttributeNode <span class="token operator">|</span> DirectiveNode <span class="token punctuation">{</span>\n  __TEST__ <span class="token operator">&amp;&amp;</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\r\\n\\f /&gt;]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Name. 解析属性名</span>\n  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\r\\n\\f /&gt;][^\\t\\r\\n\\f /&gt;=]*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token operator">!</span> <span class="token comment">// 匹配属性</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// 如果已经存在，抛出错误</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>nameSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">DUPLICATE_ATTRIBUTE</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 添加已解析的属性</span>\n  nameSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n\n  <span class="token comment">// 如果属性为=，抛出错误</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&quot;&#39;&lt;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n    <span class="token keyword">let</span> m<span class="token operator">:</span> RegExpExecArray <span class="token operator">|</span> <span class="token keyword">null</span>\n    <span class="token comment">// 如果属性出现意外字符</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">,</span>\n        ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME</span><span class="token punctuation">,</span>\n        m<span class="token punctuation">.</span>index\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> name<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n\n  <span class="token comment">// Value 解析属性值</span>\n  <span class="token keyword">let</span> value<span class="token operator">:</span> AttributeValue <span class="token operator">=</span> <span class="token keyword">undefined</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\t\\r\\n\\f ]*=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n    <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n    value <span class="token operator">=</span> <span class="token function">parseAttributeValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n    <span class="token comment">// 如果属性不存在，抛出错误</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">MISSING_ATTRIBUTE_VALUE</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> loc <span class="token operator">=</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span>\n  <span class="token comment">// 解析指令</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(v-|:|@|#)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>\n      name\n    <span class="token punctuation">)</span><span class="token operator">!</span>\n\n    <span class="token comment">// 获取指令名称 如果是:开头为bind 是@为on 否则为slot</span>\n    <span class="token keyword">let</span> dirName <span class="token operator">=</span>\n      match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span>\n      <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;bind&#39;</span> <span class="token operator">:</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;on&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;slot&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> arg<span class="token operator">:</span> ExpressionNode <span class="token operator">|</span> <span class="token keyword">undefined</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> isSlot <span class="token operator">=</span> dirName <span class="token operator">===</span> <span class="token string">&#39;slot&#39;</span>\n      <span class="token keyword">const</span> startOffset <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 获取开始位置</span>\n      <span class="token keyword">const</span> loc <span class="token operator">=</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">,</span>\n        <span class="token function">getNewPosition</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">,</span> startOffset<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">getNewPosition</span><span class="token punctuation">(</span>\n          context<span class="token punctuation">,</span>\n          start<span class="token punctuation">,</span>\n          startOffset <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isSlot <span class="token operator">&amp;&amp;</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token keyword">let</span> content <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n      <span class="token keyword">let</span> isStatic <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 是否静态</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        isStatic <span class="token operator">=</span> <span class="token boolean">false</span>\n\n        <span class="token comment">// 如果找不到] 抛出错误：x缺少动态指令结尾</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">emitError</span><span class="token punctuation">(</span>\n            context<span class="token punctuation">,</span>\n            ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// #1241 special case for v-slot: vuetify relies extensively on slot</span>\n        <span class="token comment">// names containing dots. v-slot doesn&#39;t have any modifiers and Vue 2.x</span>\n        <span class="token comment">// supports such usage so we are keeping it consistent with 2.x.</span>\n        content <span class="token operator">+=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span>\n      <span class="token punctuation">}</span>\n\n      arg <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>\n        content<span class="token punctuation">,</span>\n        isStatic<span class="token punctuation">,</span>\n        constType<span class="token operator">:</span> isStatic\n          <span class="token operator">?</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span>\n          <span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">,</span>\n        loc\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 是引号</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>isQuoted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> valueLoc <span class="token operator">=</span> value<span class="token punctuation">.</span>loc\n      valueLoc<span class="token punctuation">.</span>start<span class="token punctuation">.</span>offset<span class="token operator">++</span>\n      valueLoc<span class="token punctuation">.</span>start<span class="token punctuation">.</span>column<span class="token operator">++</span>\n      valueLoc<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token function">advancePositionWithClone</span><span class="token punctuation">(</span>valueLoc<span class="token punctuation">.</span>start<span class="token punctuation">,</span> value<span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n      valueLoc<span class="token punctuation">.</span>source <span class="token operator">=</span> valueLoc<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> modifiers <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">?</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n    <span class="token comment">// 2.x compat v-bind:foo.sync -&gt; v-model:foo</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> dirName <span class="token operator">===</span> <span class="token string">&#39;bind&#39;</span> <span class="token operator">&amp;&amp;</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        modifiers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;sync&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token function">checkCompatEnabled</span><span class="token punctuation">(</span>\n          CompilerDeprecationTypes<span class="token punctuation">.</span><span class="token constant">COMPILER_V_BIND_SYNC</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          loc<span class="token punctuation">,</span>\n          arg<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>source\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dirName <span class="token operator">=</span> <span class="token string">&#39;model&#39;</span>\n        modifiers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;sync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> modifiers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkCompatEnabled</span><span class="token punctuation">(</span>\n          CompilerDeprecationTypes<span class="token punctuation">.</span><span class="token constant">COMPILER_V_BIND_PROP</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          loc\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">,</span> <span class="token comment">// 7</span>\n      name<span class="token operator">:</span> dirName<span class="token punctuation">,</span>\n      exp<span class="token operator">:</span> value <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>\n        content<span class="token operator">:</span> value<span class="token punctuation">.</span>content<span class="token punctuation">,</span>\n        isStatic<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token comment">// Treat as non-constant by default. This can be potentially set to</span>\n        <span class="token comment">// other values by `transformExpression` to make it eligible for hoisting.</span>\n        <span class="token comment">// 将在transform阶段去做转换</span>\n        constType<span class="token operator">:</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">,</span>\n        loc<span class="token operator">:</span> value<span class="token punctuation">.</span>loc\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      arg<span class="token punctuation">,</span>\n      modifiers<span class="token punctuation">,</span>\n      loc\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token comment">// 6</span>\n    name<span class="token punctuation">,</span>\n    value<span class="token operator">:</span> value <span class="token operator">&amp;&amp;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>\n      content<span class="token operator">:</span> value<span class="token punctuation">.</span>content<span class="token punctuation">,</span>\n      loc<span class="token operator">:</span> value<span class="token punctuation">.</span>loc\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    loc\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="解析属性值"><a class="header-anchor" href="#解析属性值" aria-hidden="true">#</a> 解析属性值</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseAttributeValue</span><span class="token punctuation">(</span>context<span class="token operator">:</span> ParserContext<span class="token punctuation">)</span><span class="token operator">:</span> AttributeValue <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// 获取上次解析的值</span>\n  <span class="token keyword">let</span> content<span class="token operator">:</span> <span class="token builtin">string</span>\n\n  <span class="token keyword">const</span> quote <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> isQuoted <span class="token operator">=</span> quote <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">||</span> quote <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token comment">// 如果是&quot; | &#39;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isQuoted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Quoted value. 前进1位</span>\n    <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment">// 获取结束引号的位置</span>\n    <span class="token keyword">const</span> endIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">,</span>\n        context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length<span class="token punctuation">,</span>\n        TextModes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_VALUE</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 拿到属性值</span>\n      content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_VALUE</span><span class="token punctuation">)</span>\n      <span class="token comment">// 前进1位</span>\n      <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Unquoted</span>\n    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\r\\n\\f &gt;]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> unexpectedChars <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&quot;&#39;&lt;=`]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n    <span class="token keyword">let</span> m<span class="token operator">:</span> RegExpExecArray <span class="token operator">|</span> <span class="token keyword">null</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> unexpectedChars<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>\n        context<span class="token punctuation">,</span>\n        ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE</span><span class="token punctuation">,</span>\n        m<span class="token punctuation">.</span>index\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    content <span class="token operator">=</span> <span class="token function">parseTextData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_VALUE</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> isQuoted<span class="token punctuation">,</span> loc<span class="token operator">:</span> <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="获取解析到的key和属性"><a class="header-anchor" href="#获取解析到的key和属性" aria-hidden="true">#</a> 获取解析到的key和属性</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseAttributes</span><span class="token punctuation">(</span>\n  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> TagType\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>AttributeNode <span class="token operator">|</span> DirectiveNode<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">debugger</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> attributeNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>\n    context<span class="token punctuation">.</span>source<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token operator">!</span><span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token operator">!</span><span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;/&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_SOLIDUS_IN_TAG</span><span class="token punctuation">)</span>\n      <span class="token function">advanceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 是否为结束</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">END_TAG_WITH_ATTRIBUTES</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> attr <span class="token operator">=</span> <span class="token function">parseAttribute</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attributeNames<span class="token punctuation">)</span> <span class="token comment">// 拿到解析的属性</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> TagType<span class="token punctuation">.</span>Start<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      props<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token comment">// 添加</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果属性缺少空格</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^\\t\\r\\n\\f /&gt;]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">MISSING_WHITESPACE_BETWEEN_ATTRIBUTES</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">advanceSpaces</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> props\n<span class="token punctuation">}</span>\n</code></pre></div>',
    7
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
