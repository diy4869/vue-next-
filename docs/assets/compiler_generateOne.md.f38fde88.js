import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"generate 代码生成","description":"","frontmatter":{},"headers":[{"level":2,"title":"generate 代码生成","slug":"generate-代码生成"},{"level":2,"title":"createCodegenContext 创建代码生成上下文","slug":"createcodegencontext-创建代码生成上下文"},{"level":2,"title":"具体实现","slug":"具体实现"},{"level":3,"title":"genFunctionPreamble 生成函数方式","slug":"genfunctionpreamble-生成函数方式"}],"relativePath":"compiler/generateOne.md","lastUpdated":1641357564051}',
  p = {},
  o = a(
    '<h2 id="generate-代码生成"><a class="header-anchor" href="#generate-代码生成" aria-hidden="true">#</a> generate 代码生成</h2><p><code>generate</code>依然接收一个AST，下面就来看下具体的实现过程。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CodegenOptions <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    onContextCreated<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n\n  <span class="token comment">// ... 具体生成逻辑</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    ast<span class="token punctuation">,</span>\n    code<span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n    preamble<span class="token operator">:</span> isSetupInlined <span class="token operator">?</span> preambleContext<span class="token punctuation">.</span>code <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token comment">// SourceMapGenerator does have toJSON() method but it&#39;s not in the types</span>\n    map<span class="token operator">:</span> context<span class="token punctuation">.</span>map <span class="token operator">?</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>map <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>generate</code>依然创建了一个<code>context</code>去维护一个生成的对象。最终<code>generate</code>返回了一个对象，AST是模板经过转换后的AST，<code>code</code>则是最终生成的代码，<code>preamble</code>是通过<code>script inline</code>模式下生成的代码，而<code>map</code>即<code>source-map</code>则是用于<code>.vue</code>文件的一个<code>map</code>结构。</p><h2 id="createcodegencontext-创建代码生成上下文"><a class="header-anchor" href="#createcodegencontext-创建代码生成上下文" aria-hidden="true">#</a> createCodegenContext 创建代码生成上下文</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CodegenContext</span>\n  <span class="token keyword">extends</span> <span class="token class-name">Omit<span class="token operator">&lt;</span>\n      Required<span class="token operator">&lt;</span>CodegenOptions<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;bindingMetadata&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;inline&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;isTS&#39;</span>\n    <span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  source<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 源代码</span>\n  code<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 最终生成的代码</span>\n  line<span class="token operator">:</span> <span class="token builtin">number</span>\n  column<span class="token operator">:</span> <span class="token builtin">number</span>\n  offset<span class="token operator">:</span> <span class="token builtin">number</span>\n  indentLevel<span class="token operator">:</span> <span class="token builtin">number</span>\n  pure<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  map<span class="token operator">?</span><span class="token operator">:</span> SourceMapGenerator\n  <span class="token function">helper</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 生成期间需要调用的帮助函数</span>\n  <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> node<span class="token operator">?</span><span class="token operator">:</span> CodegenNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 添加code</span>\n  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 添加空格</span>\n  <span class="token function">deindent</span><span class="token punctuation">(</span>withoutNewLine<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 删除空行</span>\n  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token comment">// 添加新行</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 创建代码生成</span>\n<span class="token keyword">function</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>\n  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    mode <span class="token operator">=</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span>\n    prefixIdentifiers <span class="token operator">=</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>\n    sourceMap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">template.vue.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    scopeId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    optimizeImports <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    runtimeGlobalName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Vue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    runtimeModuleName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">vue</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    ssr <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token operator">:</span> CodegenOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenContext <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context<span class="token operator">:</span> CodegenContext <span class="token operator">=</span> <span class="token punctuation">{</span>\n    mode<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    sourceMap<span class="token punctuation">,</span>\n    filename<span class="token punctuation">,</span>\n    scopeId<span class="token punctuation">,</span>\n    optimizeImports<span class="token punctuation">,</span>\n    runtimeGlobalName<span class="token punctuation">,</span>\n    runtimeModuleName<span class="token punctuation">,</span>\n    ssr<span class="token punctuation">,</span>\n    source<span class="token operator">:</span> ast<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>source<span class="token punctuation">,</span>\n    code<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 最终需要生成的代码</span>\n    column<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    line<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    indentLevel<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    pure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    map<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token function">helper</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span>code <span class="token operator">+=</span> code\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>map<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">let</span> name\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> content <span class="token operator">=</span> node<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^_ctx\\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">!==</span> node<span class="token punctuation">.</span>content <span class="token operator">&amp;&amp;</span> <span class="token function">isSimpleIdentifier</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              name <span class="token operator">=</span> content\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">addMapping</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>start<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">advancePositionWithMutation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> code<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>loc <span class="token operator">!==</span> locStub<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">addMapping</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>loc<span class="token punctuation">.</span>end<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">++</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">deindent</span><span class="token punctuation">(</span>withoutNewLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>withoutNewLine<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">--</span>context<span class="token punctuation">.</span>indentLevel\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">newline</span><span class="token punctuation">(</span><span class="token operator">--</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 添加新行</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>indentLevel<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">newline</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">addMapping</span><span class="token punctuation">(</span>loc<span class="token operator">:</span> Position<span class="token punctuation">,</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>map<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token punctuation">,</span>\n      source<span class="token operator">:</span> context<span class="token punctuation">.</span>filename<span class="token punctuation">,</span>\n      original<span class="token operator">:</span> <span class="token punctuation">{</span>\n        line<span class="token operator">:</span> loc<span class="token punctuation">.</span>line<span class="token punctuation">,</span>\n        column<span class="token operator">:</span> loc<span class="token punctuation">.</span>column <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// source-map column is 0 based</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      generated<span class="token operator">:</span> <span class="token punctuation">{</span>\n        line<span class="token operator">:</span> context<span class="token punctuation">.</span>line<span class="token punctuation">,</span>\n        column<span class="token operator">:</span> context<span class="token punctuation">.</span>column <span class="token operator">-</span> <span class="token number">1</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> sourceMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// lazy require source-map implementation, only in non-browser builds</span>\n    context<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceMapGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    context<span class="token punctuation">.</span>map<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">setSourceContent</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> context<span class="token punctuation">.</span>source<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> context\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="具体实现"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CodegenOptions <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    onContextCreated<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>onContextCreated<span class="token punctuation">)</span> options<span class="token punctuation">.</span><span class="token function">onContextCreated</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> \n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    mode<span class="token punctuation">,</span> <span class="token comment">// 这里为function 也可以是module</span>\n    push<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    indent<span class="token punctuation">,</span>\n    deindent<span class="token punctuation">,</span>\n    newline<span class="token punctuation">,</span>\n    scopeId<span class="token punctuation">,</span>\n    ssr\n  <span class="token punctuation">}</span> <span class="token operator">=</span> context\n\n  <span class="token keyword">const</span> hasHelpers <span class="token operator">=</span> ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token comment">// true</span>\n  <span class="token keyword">const</span> useWithBlock <span class="token operator">=</span> <span class="token operator">!</span>prefixIdentifiers <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> <span class="token string">&#39;module&#39;</span> <span class="token comment">// true </span>\n  <span class="token keyword">const</span> genScopeId <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> scopeId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span>\n  <span class="token keyword">const</span> isSetupInlined <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>inline <span class="token comment">// false</span>\n\n  <span class="token comment">// preambles</span>\n  <span class="token comment">// in setup() inline mode, the preamble is generated in a sub context</span>\n  <span class="token comment">// and returned separately.</span>\n  <span class="token keyword">const</span> preambleContext <span class="token operator">=</span> isSetupInlined\n    <span class="token operator">?</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n    <span class="token operator">:</span> context\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genModulePreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> preambleContext<span class="token punctuation">,</span> genScopeId<span class="token punctuation">,</span> isSetupInlined<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> preambleContext<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ... 其他</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>由于这里<code>mode</code>为<code>function</code>，这里会去执行<code>genFunctionPreamble</code></p><h3 id="genfunctionpreamble-生成函数方式"><a class="header-anchor" href="#genfunctionpreamble-生成函数方式" aria-hidden="true">#</a> genFunctionPreamble 生成函数方式</h3><div class="language-ts"><pre><code>\n<span class="token keyword">function</span> <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    ssr<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    newline<span class="token punctuation">,</span>\n    runtimeModuleName<span class="token punctuation">,</span>\n    runtimeGlobalName <span class="token comment">// Vue</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">const</span> VueBinding <span class="token operator">=</span>\n    <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> ssr\n      <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">require(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>runtimeModuleName<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n      <span class="token operator">:</span> runtimeGlobalName\n  <span class="token keyword">const</span> <span class="token function-variable function">aliasHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n  <span class="token comment">// 生成const的结构声明，默认将生成在顶部</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> prefixIdentifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      \n      <span class="token function">push</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>VueBinding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Vue最终生成的代码会被with包括，所以这里保存变量，避免冲突</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const _Vue = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>VueBinding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token comment">// in &quot;with&quot; mode, helpers are declared inside the with block to avoid</span>\n      <span class="token comment">// has check cost, but hoists are lifted out of the function - we need</span>\n      <span class="token comment">// to provide the helper here.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> staticHelpers <span class="token operator">=</span> <span class="token punctuation">[</span>\n          <span class="token constant">CREATE_VNODE</span><span class="token punctuation">,</span>\n          <span class="token constant">CREATE_COMMENT</span><span class="token punctuation">,</span>\n          <span class="token constant">CREATE_TEXT</span><span class="token punctuation">,</span>\n          <span class="token constant">CREATE_STATIC</span>\n        <span class="token punctuation">]</span>\n          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>helper <span class="token operator">=&gt;</span> ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>helper<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\n        <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>staticHelpers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } = _Vue\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> \n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 为SSR渲染生成代码</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>ssrHelpers <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span>ssrHelpers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ssr guarantees prefixIdentifier: true</span>\n    <span class="token function">push</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>ssrHelpers\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } = require(&quot;@vue/server-renderer&quot;)\\n</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 生成需要提升的代码</span>\n  <span class="token function">genHoists</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 至此生成的代码</span>\n<span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createVNode<span class="token operator">:</span> _createVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue\n\n<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;suspense&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;supense组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;telport组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n\n<span class="token keyword">return</span> \n</code></pre></div>',
    11
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
