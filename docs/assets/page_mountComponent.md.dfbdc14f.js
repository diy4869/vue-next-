import { o as n, c as s, a } from './app.547ab472.js'
const p =
    '{"title":"mountComponent 挂载组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"mountComponent 挂载组件","slug":"mountcomponent-挂载组件"},{"level":3,"title":"createComponentInstance  创建组件实例","slug":"createcomponentinstance-创建组件实例"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"page/mountComponent.md","lastUpdated":1641357564064}',
  t = {},
  o = a(
    '<h2 id="mountcomponent-挂载组件"><a class="header-anchor" href="#mountcomponent-挂载组件" aria-hidden="true">#</a> mountComponent 挂载组件</h2><p>这部分代码在<code>packages/runtime-core/src/renderer.ts</code>，组件挂载有以下过程：</p><ul><li><code>createComponentInstance</code> 创建组件实例</li><li><code>setupComponent</code> 安装组件</li><li><code>setupRenderEffect</code> 渲染组件</li></ul><div class="language-ts"><pre><code> <span class="token keyword">const</span> mountComponent<span class="token operator">:</span> <span class="token function-variable function">MountComponentFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    initialVNode<span class="token punctuation">,</span>\n    container<span class="token punctuation">,</span>\n    anchor<span class="token punctuation">,</span>\n    parentComponent<span class="token punctuation">,</span>\n    parentSuspense<span class="token punctuation">,</span>\n    isSVG<span class="token punctuation">,</span>\n    optimized\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 2.x 在实际创建组件之前，预先创建了组件实例</span>\n    <span class="token comment">// 2.x compat may pre-creaate the component instance before actually</span>\n    <span class="token comment">// mounting</span>\n    <span class="token keyword">const</span> compatMountInstance <span class="token operator">=</span> __COMPAT__ <span class="token operator">&amp;&amp;</span> initialVNode<span class="token punctuation">.</span>component\n    <span class="token comment">// 创建组件</span>\n    <span class="token keyword">const</span> instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">=</span>\n      compatMountInstance <span class="token operator">||</span>\n      <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>\n        initialVNode<span class="token punctuation">,</span>\n        parentComponent<span class="token punctuation">,</span>\n        parentSuspense\n      <span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// ... </span>\n  \n    <span class="token comment">// inject renderer internals for keepAlive</span>\n    <span class="token comment">// 是否keepAlive组件，是否存在__isKeepAlive属性</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isKeepAlive</span><span class="token punctuation">(</span>initialVNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">;</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext<span class="token punctuation">)</span><span class="token punctuation">.</span>renderer <span class="token operator">=</span> internals\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// resolve props and slots for setup context</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> compatMountInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 性能统计</span>\n        <span class="token function">startMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 安装组件</span>\n      <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">endMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">init</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// setup() is async. This component relies on async logic to be resolved</span>\n    <span class="token comment">// before proceeding</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>asyncDep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      parentSuspense <span class="token operator">&amp;&amp;</span> parentSuspense<span class="token punctuation">.</span><span class="token function">registerDep</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupRenderEffect<span class="token punctuation">)</span>\n\n      <span class="token comment">// Give it a placeholder if this is not hydration</span>\n      <span class="token comment">// TODO handle self-defined fallback</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> placeholder <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">processCommentNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> placeholder<span class="token punctuation">,</span> container<span class="token operator">!</span><span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 渲染组件</span>\n    <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>\n      instance<span class="token punctuation">,</span>\n      initialVNode<span class="token punctuation">,</span>\n      container<span class="token punctuation">,</span>\n      anchor<span class="token punctuation">,</span>\n      parentSuspense<span class="token punctuation">,</span>\n      isSVG<span class="token punctuation">,</span>\n      optimized\n    <span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">popWarningContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token function">endMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mount</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="createcomponentinstance-创建组件实例"><a class="header-anchor" href="#createcomponentinstance-创建组件实例" aria-hidden="true">#</a> createComponentInstance 创建组件实例</h3><p>这部分代码在<code>packages/runtime-core/src/component.ts</code>，由于类型声明有点多，这里就不贴出来了。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>\n  vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span>\n  parent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  suspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token keyword">type</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ConcreteComponent\n  <span class="token comment">// inherit parent app context - or - if root, adopt from root vnode</span>\n  <span class="token comment">// 如果有父组件，则用父组件的appContext 否则用当前vnode的，或者就重新创建一个appContext</span>\n  <span class="token comment">// 初次渲染是不存在parent的，所以这里为vnode.appContext</span>\n  <span class="token keyword">const</span> appContext <span class="token operator">=</span>\n    <span class="token punctuation">(</span>parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>appContext <span class="token operator">:</span> vnode<span class="token punctuation">.</span>appContext<span class="token punctuation">)</span> <span class="token operator">||</span> emptyAppContext\n\n  <span class="token keyword">const</span> instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">=</span> <span class="token punctuation">{</span>\n    uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span>\n    vnode<span class="token punctuation">,</span>\n    <span class="token keyword">type</span><span class="token punctuation">,</span>\n    parent<span class="token punctuation">,</span>\n    appContext<span class="token punctuation">,</span>\n    root<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// to be immediately set</span>\n    next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    subTree<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// 重点，最终需要根据这个去渲染DOM</span>\n    update<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// will be set synchronously right after creation</span>\n    render<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    proxy<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    exposed<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    withProxy<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    effects<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    provides<span class="token operator">:</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>provides <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span>provides<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    accessCache<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span>\n    renderCache<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// local resovled assets</span>\n    components<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    directives<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// resolved props and emits options</span>\n    propsOptions<span class="token operator">:</span> <span class="token function">normalizePropsOptions</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    emitsOptions<span class="token operator">:</span> <span class="token function">normalizeEmitsOptions</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// emit</span>\n    emit<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token comment">// to be set immediately</span>\n    emitted<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// props default value</span>\n    propsDefaults<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// state</span>\n    ctx<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    attrs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    slots<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    refs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    setupState<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    setupContext<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// suspense related</span>\n    suspense<span class="token punctuation">,</span>\n    suspenseId<span class="token operator">:</span> suspense <span class="token operator">?</span> suspense<span class="token punctuation">.</span>pendingId <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    asyncDep<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    asyncResolved<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// lifecycle hooks</span>\n    <span class="token comment">// not using enums here because it results in computed properties</span>\n    isMounted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isUnmounted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isDeactivated<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    bc<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// beforeCreate</span>\n    c<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// created</span>\n    bm<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// beforeMount</span>\n    m<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// mounted</span>\n    bu<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//beforeUpdate</span>\n    u<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// updated</span>\n    um<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// unMounted</span>\n    bum<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// beforeUnMount</span>\n    da<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// deactivated</span>\n    a<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// activated</span>\n    rtg<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// RENDER_TRIGGERED</span>\n    rtc<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// RENDER_TRACKED</span>\n    ec<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// ERROR_CAPTURED</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    instance<span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token function">createRenderContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    instance<span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token punctuation">{</span> _<span class="token operator">:</span> instance <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  instance<span class="token punctuation">.</span>root <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>root <span class="token operator">:</span> instance\n  instance<span class="token punctuation">.</span>emit <span class="token operator">=</span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> instance\n<span class="token punctuation">}</span>\n</code></pre></div><p>组件其实就是一个对象，里面去维护了一些数据，用于渲染。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>暂时就到这里，下一篇来说如何安装组件。</p>',
    10
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
