import { o as n, c as s, a } from './app.015d3e56.js'
const p =
    '{"title":"介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍"},{"level":2,"title":"parserOptions 解析选项","slug":"parseroptions-解析选项"},{"level":3,"title":"compile","slug":"compile"},{"level":3,"title":"baseCompile","slug":"basecompile"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"compiler/baseCompile.md","lastUpdated":1625532213485}',
  t = {},
  o = a(
    '<h2 id="介绍"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>在<a href="/compiler/ast.html"> AST </a> 章节中，简单的介绍了下AST，在编译这部分，将详细介绍模板是如何去生成<code>block tree</code>的。<code>template</code>到渲染需要经过以下步骤：</p><ul><li>将<code>template</code>解析成AST</li><li>对AST实现转换</li><li>针对转换好的AST结构生成代码</li></ul><p><b>注</b>：由于这部分内容比较深入，相对前面来讲会比较硬核。本人也不算很懂。所以简单了解下就好。这章节的代码都在<code>@packages/compiler-core</code>和<code>@packages/compiler-dom</code>中，像<code>vue</code>中内置的一些指令将会在这个阶段进行处理，如<code>v-for、v-if、v-model</code>等。</p><h2 id="parseroptions-解析选项"><a class="header-anchor" href="#parseroptions-解析选项" aria-hidden="true">#</a> parserOptions 解析选项</h2><p>先简单的来看下默认的一个解析选项，代码在<code>@packages/compiler-dom/src/parserOptions.ts</code>。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> DOMNamespaces <span class="token punctuation">{</span>\n  <span class="token constant">HTML</span> <span class="token operator">=</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">,</span>\n  <span class="token constant">SVG</span><span class="token punctuation">,</span>\n  <span class="token constant">MATH_ML</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> parserOptions<span class="token operator">:</span> ParserOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  isVoidTag<span class="token punctuation">,</span> <span class="token comment">// 是否空标签</span>\n  <span class="token function-variable function">isNativeTag</span><span class="token operator">:</span> tag <span class="token operator">=&gt;</span> <span class="token function">isHTMLTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSVGTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 是否HTML自带标签</span>\n  <span class="token function-variable function">isPreTag</span><span class="token operator">:</span> tag <span class="token operator">=&gt;</span> tag <span class="token operator">===</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>\n  decodeEntities<span class="token operator">:</span> __BROWSER__ <span class="token operator">?</span> decodeHtmlBrowser <span class="token operator">:</span> decodeHtml<span class="token punctuation">,</span>\n\n  isBuiltInComponent<span class="token operator">:</span> <span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBuiltInType</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Transition</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token constant">TRANSITION</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBuiltInType</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TransitionGroup</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token constant">TRANSITION_GROUP</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 是否内置组件</span>\n\n  <span class="token comment">// https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher</span>\n  <span class="token function">getNamespace</span><span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parent<span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> DOMNamespaces <span class="token punctuation">{</span>\n    <span class="token comment">// 如果不存在parent.ns 说明是html</span>\n    <span class="token keyword">let</span> ns <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>ns <span class="token operator">:</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> ns <span class="token operator">===</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">MATH_ML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;annotation-xml&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">SVG</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>\n          parent<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>\n            a <span class="token operator">=&gt;</span>\n              a<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span> <span class="token operator">&amp;&amp;</span>\n              a<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;encoding&#39;</span> <span class="token operator">&amp;&amp;</span>\n              a<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n              <span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">&#39;text/html&#39;</span> <span class="token operator">||</span>\n                a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">&#39;application/xhtml+xml&#39;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          ns <span class="token operator">=</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^m(?:[ions]|text)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        tag <span class="token operator">!==</span> <span class="token string">&#39;mglyph&#39;</span> <span class="token operator">&amp;&amp;</span>\n        tag <span class="token operator">!==</span> <span class="token string">&#39;malignmark&#39;</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ns <span class="token operator">=</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> ns <span class="token operator">===</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">SVG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        parent<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;foreignObject&#39;</span> <span class="token operator">||</span>\n        parent<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;desc&#39;</span> <span class="token operator">||</span>\n        parent<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;title&#39;</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        ns <span class="token operator">=</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">===</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果tag是svg 说明是svg</span>\n        <span class="token keyword">return</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">SVG</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;math&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 如果tag是math 说明是math ml</span>\n        <span class="token keyword">return</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">MATH_ML</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ns\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments</span>\n  <span class="token function">getTextMode</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tag<span class="token punctuation">,</span> ns <span class="token punctuation">}</span><span class="token operator">:</span> ElementNode<span class="token punctuation">)</span><span class="token operator">:</span> TextModes <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">===</span> DOMNamespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">&#39;textarea&#39;</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRawTextContainer</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> TextModes<span class="token punctuation">.</span><span class="token constant">RAWTEXT</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="compile"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h3><p>这一步主要把<code>template</code>和编译选项传递给了<code>baseCompile</code>，并对编译选项做了一个简单的合并，并把<code>baseCompile</code>的结果返回了出去。这部分代码在<code>@packages/compiler-dom/src/index.ts</code></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span>\n  template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>\n    template<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> parserOptions<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token comment">// ignore &lt;script&gt; and &lt;tag&gt;</span>\n        <span class="token comment">// this is not put inside DOMNodeTransforms because that list is used</span>\n        <span class="token comment">// by compiler-ssr to generate vnode fallback branches</span>\n        ignoreSideEffectTags<span class="token punctuation">,</span>\n        <span class="token operator">...</span>DOMNodeTransforms<span class="token punctuation">,</span>\n        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        DOMDirectiveTransforms<span class="token punctuation">,</span>\n        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      transformHoist<span class="token operator">:</span> __BROWSER__ <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> stringifyStatic\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="basecompile"><a class="header-anchor" href="#basecompile" aria-hidden="true">#</a> baseCompile</h3><p>本章核心，本章节将主要去对这一部分进行解释。代码在<code>packages/compiler-core/src/compile.ts</code>。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TransformPreset</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  NodeTransform<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> DirectiveTransform<span class="token operator">&gt;</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span>\n  prefixIdentifiers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> TransformPreset <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      transformOnce<span class="token punctuation">,</span>\n      transformIf<span class="token punctuation">,</span>\n      transformFor<span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token punctuation">(</span>__COMPAT__ <span class="token operator">?</span> <span class="token punctuation">[</span>transformFilter<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> prefixIdentifiers\n        <span class="token operator">?</span> <span class="token punctuation">[</span>\n            <span class="token comment">// order is important</span>\n            trackVForSlotScopes<span class="token punctuation">,</span>\n            transformExpression\n          <span class="token punctuation">]</span>\n        <span class="token operator">:</span> __BROWSER__ <span class="token operator">&amp;&amp;</span> __DEV__\n          <span class="token operator">?</span> <span class="token punctuation">[</span>transformExpression<span class="token punctuation">]</span>\n          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      transformSlotOutlet<span class="token punctuation">,</span>\n      transformElement<span class="token punctuation">,</span>\n      trackSlotScopes<span class="token punctuation">,</span>\n      transformText\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      on<span class="token operator">:</span> transformOn<span class="token punctuation">,</span>\n      bind<span class="token operator">:</span> transformBind<span class="token punctuation">,</span>\n      model<span class="token operator">:</span> transformModel\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// we name it `baseCompile` so that higher order compilers like</span>\n<span class="token comment">// @vue/compiler-dom can export `compile` while re-exporting everything else.</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>\n  template<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> onError <span class="token operator">=</span> options<span class="token punctuation">.</span>onError <span class="token operator">||</span> defaultOnError\n  <span class="token keyword">const</span> isModuleMode <span class="token operator">=</span> options<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span>\n  <span class="token comment">/* istanbul ignore if */</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__BROWSER__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>prefixIdentifiers <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_PREFIX_ID_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isModuleMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_MODULE_MODE_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> prefixIdentifiers <span class="token operator">=</span>\n    <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>prefixIdentifiers <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">||</span> isModuleMode<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefixIdentifiers <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>cacheHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_CACHE_HANDLER_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>scopeId <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isModuleMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">createCompilerError</span><span class="token punctuation">(</span>ErrorCodes<span class="token punctuation">.</span><span class="token constant">X_SCOPE_ID_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 获取ast</span>\n  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> template\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>nodeTransforms<span class="token punctuation">,</span> directiveTransforms<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span>\n    prefixIdentifiers\n  <span class="token punctuation">)</span>\n  <span class="token comment">// 转换</span>\n  <span class="token function">transform</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      prefixIdentifiers<span class="token punctuation">,</span>\n      nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token operator">...</span>nodeTransforms<span class="token punctuation">,</span>\n        <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// user transforms</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      directiveTransforms<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        directiveTransforms<span class="token punctuation">,</span>\n        options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// user transforms</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token comment">// 生成block tree 用于最终渲染</span>\n  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      prefixIdentifiers\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>baseCompile</code>主要就对前面说到的步骤放到了一块进行处理，并把生成的代码返回了出去。下一部分来看<code>template</code>是如何解析成AST的。</p>',
    15
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
