import { o as n, c as s, a } from './app.547ab472.js'
const t =
    '{"title":"setupRenderEffect 准备渲染","description":"","frontmatter":{},"headers":[{"level":2,"title":"setupRenderEffect 准备渲染","slug":"setuprendereffect-准备渲染"},{"level":3,"title":"一个大概的流程：","slug":"一个大概的流程："},{"level":3,"title":"注意：","slug":"注意："},{"level":2,"title":"总结","slug":"总结"},{"level":2,"title":"subtree","slug":"subtree"}],"relativePath":"page/setupRenderEffect.md","lastUpdated":1641357564065}',
  p = {},
  o = a(
    '<h2 id="setuprendereffect-准备渲染"><a class="header-anchor" href="#setuprendereffect-准备渲染" aria-hidden="true">#</a> setupRenderEffect 准备渲染</h2><p>在上一篇说明了组件是怎么安装的，这一篇来说组件在渲染前都做了哪些工作，没有看过组件编译过程的建议先去看完编译过程再来看这个。</p><ul><li><a href="/compiler/baseCompile.html">组件编译过程传送门</a></li><li><a href="/render/patch.html">渲染过程传送门</a></li><li><a href="/page/lifeCycle.html">生命周期传送门</a></li></ul><div class="language-ts"><pre><code><span class="token keyword">const</span> setupRenderEffect<span class="token operator">:</span> <span class="token function-variable function">SetupRenderEffectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n    instance<span class="token punctuation">,</span>\n    initialVNode<span class="token punctuation">,</span>\n    container<span class="token punctuation">,</span>\n    anchor<span class="token punctuation">,</span>\n    parentSuspense<span class="token punctuation">,</span>\n    isSVG<span class="token punctuation">,</span>\n    optimized\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// create reactive effect for rendering</span>\n    instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">componentEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果没有渲染</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> vnodeHook<span class="token operator">:</span> VNodeHook <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> el<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> initialVNode\n        <span class="token comment">// 获取组件上挂载的beforeMount onMounted parent parent为父组件</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> bm<span class="token punctuation">,</span> m<span class="token punctuation">,</span> parent <span class="token punctuation">}</span> <span class="token operator">=</span> instance \n\n        <span class="token comment">// beforeMount hook 调用beforeMount</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>bm<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>bm<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// onVnodeBeforeMount</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>vnodeHook <span class="token operator">=</span> props <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>onVnodeBeforeMount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> initialVNode<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// ... v2兼容</span>\n\n        <span class="token comment">// render</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 开始统计render</span>\n          <span class="token function">startMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">render</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 把之前renderFunction生成的模板编译为vnode，并生成subtree</span>\n        <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 结束统计render</span>\n          <span class="token function">endMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">render</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">&amp;&amp;</span> hydrateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// ... ssr</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 开始统计patch</span>\n            <span class="token function">startMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">patch</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          <span class="token comment">// 初始渲染DOM</span>\n          <span class="token function">patch</span><span class="token punctuation">(</span>\n            <span class="token keyword">null</span><span class="token punctuation">,</span>\n            subTree<span class="token punctuation">,</span>\n            container<span class="token punctuation">,</span>\n            anchor<span class="token punctuation">,</span>\n            instance<span class="token punctuation">,</span>\n            parentSuspense<span class="token punctuation">,</span>\n            isSVG\n          <span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">endMeasure</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">patch</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el\n        <span class="token punctuation">}</span>\n        <span class="token comment">// mounted hook 调用mounted 钩子</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// ... </span>\n\n        <span class="token comment">// 标记为该组件已渲染</span>\n        instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">||</span> __FEATURE_PROD_DEVTOOLS__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">devtoolsComponentAdded</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// #2458: deference mount-only object parameters to prevent memleaks</span>\n        initialVNode <span class="token operator">=</span> container <span class="token operator">=</span> anchor <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ... 组件更新过程</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> __DEV__ <span class="token operator">?</span> <span class="token function">createDevEffectOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> prodEffectOptions<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// @ts-ignore</span>\n      instance<span class="token punctuation">.</span>update<span class="token punctuation">.</span>ownerInstance <span class="token operator">=</span> instance\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n</code></pre></div><p>这里只需要关注<code>instance.update</code>内的内容就行，<code>effect</code>可能是因为响应式的副作用，才进行了包裹？具体不清楚。</p><p>接着往下看，通过<code>instance.isMounted</code>判断了组件是否有没有渲染，如果已经渲染，就执行更新逻辑，否则执行渲染过程。这一步也执行了组件的生命周期，然后调用<code>renderComponentRoot</code>生成了<code>subtree</code>，之后调用了<code>patch</code>去渲染组件（更新也是这个函数），并在结束后，调用<code>Mounted</code>钩子，标志渲染完成。</p><h3 id="一个大概的流程："><a class="header-anchor" href="#一个大概的流程：" aria-hidden="true">#</a> 一个大概的流程：</h3><ul><li>获取组件内的<code>beforeMount、Mounted、parent</code></li><li>调用<code>beforeMount hook</code></li><li>调用<code>renderComponentRoot</code>生成<code>subtree</code></li><li>调用<code>patch</code>对组件进行渲染</li><li>调用<code>mounted hook</code></li><li>标记组件已经渲染完成</li></ul><h3 id="注意："><a class="header-anchor" href="#注意：" aria-hidden="true">#</a> 注意：</h3><p>在组件渲染过程中，如果遇到子组件会重新执行编译，编译完成后，继续执行上述流程。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>组件渲染之前的准备工作到这就结束了，这里对于如何生成<code>subtree</code>的过程没有说明，有兴趣的自己去研究。</p><ul><li><a href="/render/patch.html">渲染过程传送门</a></li><li><a href="/page/lifeCycle.html">生命周期传送门</a></li></ul><h2 id="subtree"><a class="header-anchor" href="#subtree" aria-hidden="true">#</a> subtree</h2><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  anchor<span class="token operator">:</span> <span class="token null keyword">null</span>\n  appContext<span class="token operator">:</span> <span class="token null keyword">null</span>\n  children<span class="token operator">:</span> (<span class="token number">7</span>) <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>\n  component<span class="token operator">:</span> <span class="token null keyword">null</span>\n  dirs<span class="token operator">:</span> <span class="token null keyword">null</span>\n  dynamicChildren<span class="token operator">:</span> (<span class="token number">7</span>) <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>\n  dynamicProps<span class="token operator">:</span> <span class="token null keyword">null</span>\n  el<span class="token operator">:</span> <span class="token null keyword">null</span>\n  key<span class="token operator">:</span> <span class="token null keyword">null</span>\n  patchFlag<span class="token operator">:</span> <span class="token number">64</span>\n  props<span class="token operator">:</span> <span class="token null keyword">null</span>\n  ref<span class="token operator">:</span> <span class="token null keyword">null</span>\n  scopeId<span class="token operator">:</span> <span class="token null keyword">null</span>\n  shapeFlag<span class="token operator">:</span> <span class="token number">16</span>\n  slotScopeIds<span class="token operator">:</span> <span class="token null keyword">null</span>\n  ssContent<span class="token operator">:</span> <span class="token null keyword">null</span>\n  ssFallback<span class="token operator">:</span> <span class="token null keyword">null</span>\n  staticCount<span class="token operator">:</span> <span class="token number">0</span>\n  suspense<span class="token operator">:</span> <span class="token null keyword">null</span>\n  target<span class="token operator">:</span> <span class="token null keyword">null</span>\n  targetAnchor<span class="token operator">:</span> <span class="token null keyword">null</span>\n  transition<span class="token operator">:</span> <span class="token null keyword">null</span>\n  type<span class="token operator">:</span> Symbol(Fragment)\n  __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span>\n  __v_skip<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    15
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
