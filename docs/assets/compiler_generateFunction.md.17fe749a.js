import { o as n, c as s, a } from './app.c3e51dbf.js'
const p =
    '{"title":"genAssets 生成组件 指令 过滤器","description":"","frontmatter":{},"headers":[{"level":2,"title":"genAssets 生成组件 指令 过滤器","slug":"genassets-生成组件-指令-过滤器"},{"level":2,"title":"genVNodeCall 生成VNode","slug":"genvnodecall-生成vnode"},{"level":2,"title":"genNode 生成Node","slug":"gennode-生成node"},{"level":2,"title":"genNodeList 生成NodeList","slug":"gennodelist-生成nodelist"},{"level":2,"title":"genHoists 生成静态提升的节点","slug":"genhoists-生成静态提升的节点"}],"relativePath":"compiler/generateFunction.md","lastUpdated":1625904593503}',
  t = {},
  o = a(
    '<h2 id="genassets-生成组件-指令-过滤器"><a class="header-anchor" href="#genassets-生成组件-指令-过滤器" aria-hidden="true">#</a> genAssets 生成组件 指令 过滤器</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">genAssets</span><span class="token punctuation">(</span>\n  assets<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;component&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;directive&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;filter&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> helper<span class="token punctuation">,</span> push<span class="token punctuation">,</span> newline <span class="token punctuation">}</span><span class="token operator">:</span> CodegenContext\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 调用对应的函数进行解析</span>\n  <span class="token keyword">const</span> resolver <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>\n    __COMPAT__ <span class="token operator">&amp;&amp;</span> <span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&#39;filter&#39;</span>\n      <span class="token operator">?</span> <span class="token constant">RESOLVE_FILTER</span>\n      <span class="token operator">:</span> <span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">&#39;component&#39;</span>\n        <span class="token operator">?</span> <span class="token constant">RESOLVE_COMPONENT</span>\n        <span class="token operator">:</span> <span class="token constant">RESOLVE_DIRECTIVE</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> assets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> id <span class="token operator">=</span> assets<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token comment">// potential component implicit self-reference inferred from SFC filename</span>\n    <span class="token keyword">const</span> maybeSelfReference <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;__self&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>maybeSelfReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      id <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">push</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">toValidAssetId</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resolver<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        maybeSelfReference <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, true</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> assets<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="genvnodecall-生成vnode"><a class="header-anchor" href="#genvnodecall-生成vnode" aria-hidden="true">#</a> genVNodeCall 生成VNode</h2><div class="language-ts"><pre><code><span class="token comment">// 生成vnode 用于调用createVnode创建节点渲染</span>\n<span class="token keyword">function</span> <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token operator">:</span> VNodeCall<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> helper<span class="token punctuation">,</span> pure <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    tag<span class="token punctuation">,</span>\n    props<span class="token punctuation">,</span>\n    children<span class="token punctuation">,</span>\n    patchFlag<span class="token punctuation">,</span>\n    dynamicProps<span class="token punctuation">,</span>\n    directives<span class="token punctuation">,</span>\n    isBlock<span class="token punctuation">,</span>\n    disableTracking\n  <span class="token punctuation">}</span> <span class="token operator">=</span> node\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">WITH_DIRECTIVES</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果是block push一个_openBlock(</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>disableTracking <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">true</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>pure<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">PURE_ANNOTATION</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果是block 就创建一个_createBlick 否则是createVnode</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>isBlock <span class="token operator">?</span> <span class="token constant">CREATE_BLOCK</span> <span class="token operator">:</span> <span class="token constant">CREATE_VNODE</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n  <span class="token function">genNodeList</span><span class="token punctuation">(</span>\n    <span class="token function">genNullableArgs</span><span class="token punctuation">(</span><span class="token punctuation">[</span>tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> patchFlag<span class="token punctuation">,</span> dynamicProps<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    context\n  <span class="token punctuation">)</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 生成指令</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">genNode</span><span class="token punctuation">(</span>directives<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="gennode-生成node"><a class="header-anchor" href="#gennode-生成node" aria-hidden="true">#</a> genNode 生成Node</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token operator">:</span> CodegenNode <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span> <span class="token comment">// 1 生成元素，然后调用genVnodeCall 进行生成</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token operator">:</span> <span class="token comment">// 9</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token operator">:</span> <span class="token comment">// 11</span>\n      __DEV__ <span class="token operator">&amp;&amp;</span>\n        <span class="token function">assert</span><span class="token punctuation">(</span>\n          node<span class="token punctuation">.</span>codegenNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Codegen node is missing for element/if/for node. </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Apply appropriate transforms first.</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span>\n      <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>codegenNode<span class="token operator">!</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span> <span class="token comment">// 2</span>\n      <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 4 生成表达式</span>\n      <span class="token function">genExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span> <span class="token comment">// 5 生成文本 例如：{{ count }}</span>\n      <span class="token function">genInterpolation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT_CALL</span><span class="token operator">:</span> <span class="token comment">// 12</span>\n      <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 8</span>\n      <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span> <span class="token comment">// 3</span>\n      <span class="token function">genComment</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token operator">:</span> <span class="token comment">// 13 具体生成元素的部分</span>\n      <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CALL_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 14</span>\n      <span class="token function">genCallExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_OBJECT_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 15 生成属性 如class style</span>\n      <span class="token function">genObjectExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_ARRAY_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 17</span>\n      <span class="token function">genArrayExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_FUNCTION_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 18 生成函数语句</span>\n      <span class="token function">genFunctionExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CONDITIONAL_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 19</span>\n      <span class="token function">genConditionalExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CACHE_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 20</span>\n      <span class="token function">genCacheExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n\n    <span class="token comment">// SSR only types</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_BLOCK_STATEMENT</span><span class="token operator">:</span> <span class="token comment">// 21</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_TEMPLATE_LITERAL</span><span class="token operator">:</span> <span class="token comment">// 22</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genTemplateLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_IF_STATEMENT</span><span class="token operator">:</span> <span class="token comment">// 23 生成if表达式</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genIfStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_ASSIGNMENT_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 24</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genAssignmentExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_SEQUENCE_EXPRESSION</span><span class="token operator">:</span> <span class="token comment">// 25</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genSequenceExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_RETURN_STATEMENT</span><span class="token operator">:</span> <span class="token comment">// 26</span>\n      <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token function">genReturnStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n\n    <span class="token comment">/* istanbul ignore next */</span>\n    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span><span class="token operator">:</span> <span class="token comment">// 10</span>\n      <span class="token comment">// noop</span>\n      <span class="token keyword">break</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">unhandled codegen node type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>node <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token comment">// make sure we exhaust all possible types</span>\n        <span class="token keyword">const</span> exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> node\n        <span class="token keyword">return</span> exhaustiveCheck\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="gennodelist-生成nodelist"><a class="header-anchor" href="#gennodelist-生成nodelist" aria-hidden="true">#</a> genNodeList 生成NodeList</h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span>\n  nodes<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> CodegenNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  context<span class="token operator">:</span> CodegenContext<span class="token punctuation">,</span>\n  multilines<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  comma<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> newline <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果是数组就生成多个</span>\n      <span class="token function">genNodeListAsArray</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 生成一个</span>\n      <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果是多个，就添加一个，号，并在添加一行</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>multilines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        comma <span class="token operator">&amp;&amp;</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n        <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 否则只添加,</span>\n        comma <span class="token operator">&amp;&amp;</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="genhoists-生成静态提升的节点"><a class="header-anchor" href="#genhoists-生成静态提升的节点" aria-hidden="true">#</a> genHoists 生成静态提升的节点</h2><p>一个静态提升的json</p><div class="language-json"><pre><code><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\&quot;div\\&quot;&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;props&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">406</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">440</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div id=\\&quot;suspense\\&quot;&gt;supense组件&lt;/div&gt;&quot;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                            <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">0</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                            <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">0</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                            <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">411</span>\n                            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">413</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;isStatic&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;constType&quot;</span><span class="token operator">:</span> <span class="token number">3</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                            <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">414</span>\n                            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">424</span>\n                            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                            <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\&quot;suspense\\&quot;&quot;</span>\n                        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;suspense&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;isStatic&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;constType&quot;</span><span class="token operator">:</span> <span class="token number">3</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;supense组件&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">425</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">41</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">434</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;supense组件&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1 /* HOISTED */&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;isBlock&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;disableTracking&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">406</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">440</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div id=\\&quot;suspense\\&quot;&gt;supense组件&lt;/div&gt;&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\&quot;div\\&quot;&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;telport组件&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">517</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">526</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;telport组件&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;patchFlag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-1 /* HOISTED */&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;isBlock&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;disableTracking&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;loc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">512</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;end&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;column&quot;</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;offset&quot;</span><span class="token operator">:</span> <span class="token number">532</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;telport组件&lt;/div&gt;&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>具体实现：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">genHoists</span><span class="token punctuation">(</span>hoists<span class="token operator">:</span> <span class="token punctuation">(</span>JSChildNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">.</span>pure <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> newline<span class="token punctuation">,</span> helper<span class="token punctuation">,</span> scopeId<span class="token punctuation">,</span> mode <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token keyword">const</span> genScopeId <span class="token operator">=</span> <span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> scopeId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span>\n  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 添加新行</span>\n\n  <span class="token comment">// push scope Id before initializing hoisted vnodes so that these vnodes</span>\n  <span class="token comment">// get the proper scopeId as well.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">PUSH_SCOPE_ID</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scopeId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  hoists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const _hoisted_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token function">genNode</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>genScopeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">POP_SCOPE_ID</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">()</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">.</span>pure <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',
    13
  )
t.render = function(a, p, t, e, c, u) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
