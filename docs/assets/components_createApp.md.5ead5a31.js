import { o as n, c as s, a } from './app.03151976.js'
const p =
    '{"title":"createApp","description":"","frontmatter":{},"headers":[{"level":2,"title":"createApp","slug":"createapp"},{"level":3,"title":"createAppAPI","slug":"createappapi"},{"level":2,"title":"mount 挂载","slug":"mount-挂载"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"components/createApp.md","lastUpdated":1620537117956}',
  t = {},
  o = a(
    '<h2 id="createapp"><a class="header-anchor" href="#createapp" aria-hidden="true">#</a> createApp</h2><p>当我们引入<code>createApp</code>的时候，它实际上是执行了下面这段代码，代码在<code>packages/runtime-dom/src/index.ts</code></p><div class="language-ts"><pre><code><span class="token comment">// args是你调用createApp里面传的参数</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 渲染核心，重点</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 检查是否原生标签</span>\n    <span class="token function">injectNativeTagCheck</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n    <span class="token comment">// 检查是否自定义标签</span>\n    <span class="token function">injectCompilerOptionsCheck</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> app\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> CreateAppFunction<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span>\n</code></pre></div><p>我们可以看到该函数调用了<code>ensureRenderer</code>，该函数返回了一个<code>createRender</code>，该函数接受一个<code>rendererOptions</code>，这个我们暂时先不考虑，我们只用知道该函数调用了<code>createRenderer</code>这个函数，并返回了出去。</p><p>我们找到这个函数，这块代码在<code>packages/runtime-core/src/renderer/ts</code>，发现<code>createRenderer</code>内部又调用了一次<code>baseCreateRenderer</code>。</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> renderer <span class="token operator">||</span> <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Element<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  HostNode <span class="token operator">=</span> RendererNode<span class="token punctuation">,</span>\n  HostElement <span class="token operator">=</span> RendererElement\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token operator">:</span> RendererOptions<span class="token operator">&lt;</span>HostNode<span class="token punctuation">,</span> HostElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">baseCreateRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>HostNode<span class="token punctuation">,</span> HostElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> RendererOptions<span class="token punctuation">,</span>\n  createHydrationFns<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> createHydrationFunctions\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 以上省略近2k行，该函数主要负责渲染部分相关，后续再说。</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    render<span class="token punctuation">,</span> <span class="token comment">// 渲染相关</span>\n    hydrate<span class="token punctuation">,</span> <span class="token comment">// SSR</span>\n    createApp<span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span> <span class="token comment">// createApp本体</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="createappapi"><a class="header-anchor" href="#createappapi" aria-hidden="true">#</a> createAppAPI</h3><p>这时候我们去看下<code>createAppAPI</code>，该代码位于<code>packages/runtime-core/src/apiCreateApp.ts</code></p><div class="language-ts"><pre><code><span class="token comment">// 这是createApp的类型定义</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">App<span class="token operator">&lt;</span>HostElement <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  version<span class="token operator">:</span> <span class="token builtin">string</span>\n  config<span class="token operator">:</span> AppConfig\n  <span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token operator">:</span> Plugin<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n  <span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n  <span class="token function">component</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  <span class="token function">component</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Component<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n  <span class="token function">directive</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Directive <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  <span class="token function">directive</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> directive<span class="token operator">:</span> Directive<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n  <span class="token function">mount</span><span class="token punctuation">(</span>\n    rootContainer<span class="token operator">:</span> HostElement <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    isHydrate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n    isSVG<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> ComponentPublicInstance\n  <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token generic-function"><span class="token function">provide</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n\n  <span class="token comment">// internal, but we need to expose these for the server-renderer and devtools</span>\n  _uid<span class="token operator">:</span> <span class="token builtin">number</span>\n  _component<span class="token operator">:</span> ConcreteComponent\n  _props<span class="token operator">:</span> Data <span class="token operator">|</span> <span class="token keyword">null</span>\n  _container<span class="token operator">:</span> HostElement <span class="token operator">|</span> <span class="token keyword">null</span>\n  _context<span class="token operator">:</span> AppContext\n\n  <span class="token comment">/**\n   * v2 compat only\n   */</span>\n  filter<span class="token operator">?</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n  filter<span class="token operator">?</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filter<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span>\n\n  <span class="token comment">/**\n   * @internal v3 compat only\n   */</span>\n  _createRoot<span class="token operator">?</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ComponentOptions<span class="token punctuation">)</span><span class="token operator">:</span> ComponentPublicInstance\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 具体实现</span>\n<span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createAppAPI</span><span class="token generic class-name"><span class="token operator">&lt;</span>HostElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  render<span class="token operator">:</span> RootRenderFunction<span class="token punctuation">,</span>\n  hydrate<span class="token operator">?</span><span class="token operator">:</span> RootHydrateFunction\n<span class="token punctuation">)</span><span class="token operator">:</span> CreateAppFunction<span class="token operator">&lt;</span>HostElement<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">,</span> rootProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootProps <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>rootProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      __DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">root props passed to app.mount() must be an object.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      rootProps <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 创建AppContext</span>\n    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 已安装的插件</span>\n    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 是否渲染</span>\n    <span class="token keyword">let</span> isMounted <span class="token operator">=</span> <span class="token boolean">false</span>\n\n    <span class="token keyword">const</span> app<span class="token operator">:</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token punctuation">{</span>\n      _uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span>\n      _component<span class="token operator">:</span> rootComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span>\n      _props<span class="token operator">:</span> rootProps<span class="token punctuation">,</span>\n      _container<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      _context<span class="token operator">:</span> context<span class="token punctuation">,</span>\n\n      version<span class="token punctuation">,</span>\n      <span class="token comment">// ...</span>\n      <span class="token function">mount</span><span class="token punctuation">(</span>\n        rootContainer<span class="token operator">:</span> HostElement<span class="token punctuation">,</span>\n        isHydrate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n        isSVG<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n      <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 创建Vnode</span>\n          <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>\n            rootComponent <span class="token keyword">as</span> ConcreteComponent<span class="token punctuation">,</span>\n            rootProps\n          <span class="token punctuation">)</span>\n          <span class="token comment">// store app context on the root VNode.</span>\n          <span class="token comment">// this will be set on the root instance on initial mount.</span>\n          vnode<span class="token punctuation">.</span>appContext <span class="token operator">=</span> context\n\n          <span class="token comment">// HMR root reload</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            context<span class="token punctuation">.</span><span class="token function-variable function">reload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n              <span class="token function">render</span><span class="token punctuation">(</span><span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>isHydrate <span class="token operator">&amp;&amp;</span> hydrate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">hydrate</span><span class="token punctuation">(</span>vnode <span class="token keyword">as</span> VNode<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Element<span class="token operator">&gt;</span><span class="token punctuation">,</span> rootContainer <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          isMounted <span class="token operator">=</span> <span class="token boolean">true</span>\n          app<span class="token punctuation">.</span>_container <span class="token operator">=</span> rootContainer\n          <span class="token comment">// for devtools and telemetry</span>\n          <span class="token punctuation">;</span><span class="token punctuation">(</span>rootContainer <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__vue_app__ <span class="token operator">=</span> app\n\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">||</span> __FEATURE_PROD_DEVTOOLS__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">devtoolsInitApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> version<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n\n          <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>proxy\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">warn</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">App has already been mounted.\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">If you want to remount the same app, move your app creation logic </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">into a factory function and create fresh app instances for each </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n              <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mount - e.g. \\`const createMyApp = () =&gt; createApp(App)\\`</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// ...</span>\n    <span class="token keyword">return</span> app\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p><code>normalizeContainer</code>用于判断el是否存在</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">normalizeContainer</span><span class="token punctuation">(</span>\n  container<span class="token operator">:</span> Element <span class="token operator">|</span> ShadowRoot <span class="token operator">|</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Element <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 确保el元素存在</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to mount app: mount target selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>container<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned null.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    __DEV__ <span class="token operator">&amp;&amp;</span>\n    container <span class="token keyword">instanceof</span> <span class="token class-name">window</span><span class="token punctuation">.</span>ShadowRoot <span class="token operator">&amp;&amp;</span>\n    container<span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&#39;closed&#39;</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果是ShadowRoot并且mode为mode可能会导致未知的bug</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mounting on a ShadowRoot with \\`{mode: &quot;closed&quot;}\\` may lead to unpredictable bugs</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> container <span class="token keyword">as</span> <span class="token builtin">any</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="mount-挂载"><a class="header-anchor" href="#mount-挂载" aria-hidden="true">#</a> mount 挂载</h2><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token operator">=</span> app\n  app<span class="token punctuation">.</span>mount <span class="token operator">=</span> <span class="token punctuation">(</span>containerOrSelector<span class="token operator">:</span> Element <span class="token operator">|</span> ShadowRoot <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取mount所挂载的节点</span>\n    <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token function">normalizeContainer</span><span class="token punctuation">(</span>containerOrSelector<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    <span class="token keyword">const</span> component <span class="token operator">=</span> app<span class="token punctuation">.</span>_component\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>component<span class="token punctuation">.</span>render <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>component<span class="token punctuation">.</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// __UNSAFE__</span>\n      <span class="token comment">// Reason: potential execution of JS expressions in in-DOM template.</span>\n      <span class="token comment">// The user must make sure the in-DOM template is trusted. If it&#39;s</span>\n      <span class="token comment">// rendered by the server, the template should not contain any user data.</span>\n      component<span class="token punctuation">.</span>template <span class="token operator">=</span> container<span class="token punctuation">.</span>innerHTML\n      <span class="token comment">// 2.x compat check</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;兼容&#39;</span><span class="token punctuation">,</span> __COMPAT__<span class="token punctuation">)</span>\n      <span class="token comment">/**\n       * __COMPAT__ 是启动的时候通过rollup去注入进去的\n       * 用来判断是否向下兼容\n       */</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__ <span class="token operator">&amp;&amp;</span> __DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> container<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> attr <span class="token operator">=</span> container<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&#39;v-cloak&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(v-|:|@)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            compatUtils<span class="token punctuation">.</span><span class="token function">warnDeprecation</span><span class="token punctuation">(</span>\n              DeprecationTypes<span class="token punctuation">.</span><span class="token constant">GLOBAL_MOUNT_CONTAINER</span><span class="token punctuation">,</span>\n              <span class="token keyword">null</span>\n            <span class="token punctuation">)</span>\n            <span class="token keyword">break</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 渲染前清空html</span>\n    container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n    <span class="token comment">// 挂载元素进行渲染</span>\n    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> container <span class="token keyword">instanceof</span> <span class="token class-name">SVGElement</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// vue2的话，会给#app设置一个v-cloak属性，在render的时候清空掉</span>\n      container<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;v-cloak&#39;</span><span class="token punctuation">)</span>\n      container<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-v-app&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> proxy\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> app\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> CreateAppFunction<span class="token operator">&lt;</span>Element<span class="token operator">&gt;</span>\n\n</code></pre></div><p>这部分是<code>vue</code>的初次渲染逻辑，首先官方解构了<code>mount</code>方法， 然后又重写了<code>app.mount</code>，并调用<code>normalizeContainer</code>校验挂载元素，临时保存了需要渲染的内容。接下来并对<code>vue2</code>的写法做了兼容处理。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>至此，<code>createApp</code>的流程大概到此结束，下一部分来分析<code>mount</code>渲染部分，由于这部分比较复杂，可能会更新的比较慢。</p>',
    16
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
