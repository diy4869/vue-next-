import { o as n, c as s, a } from './app.03151976.js'
const p =
    '{"title":"QA","description":"","frontmatter":{},"headers":[{"level":2,"title":"QA","slug":"qa"},{"level":2,"title":"VNode","slug":"vnode"},{"level":3,"title":"具体实现","slug":"具体实现"},{"level":3,"title":"总结","slug":"总结"}],"relativePath":"page/vnode.md","lastUpdated":1625529499960}',
  t = {},
  o = a(
    '<h2 id="qa"><a class="header-anchor" href="#qa" aria-hidden="true">#</a> QA</h2><ul><li>什么是<code>VNode</code>，为什么需要<code>VNode</code>？</li><li><code>vue-next</code>中，如何实现的<code>VNode</code>？</li></ul><h2 id="vnode"><a class="header-anchor" href="#vnode" aria-hidden="true">#</a> VNode</h2><p>在了解了浏览器渲染流程之后，我们再来去看<code>vnode</code>，<code>vnode</code>定义了一种数据描述，它是对<code>DOM</code>节点的一种描述，如果我们对<code>DOM</code>进行操作，会产生渲染开销，当然这部分不是<code>js</code>所产生的，而是由浏览器渲染所产生的，所以就诞生了<code>Vitrual DOM</code>。</p><p>在<code>vue-next</code>中，是通过一个对象去描述的，代码在<code>packages/runtime-core/src/vnode.ts</code>，这是<code>vnode</code>的类型定义。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode<span class="token operator">&lt;</span>\n  HostNode <span class="token operator">=</span> RendererNode<span class="token punctuation">,</span>\n  HostElement <span class="token operator">=</span> RendererElement<span class="token punctuation">,</span>\n  ExtraProps <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>\n<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * @internal\n   */</span>\n  __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 标记为vnode</span>\n\n  <span class="token comment">/**\n   * @internal\n   */</span>\n  <span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">SKIP</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span>\n\n  <span class="token keyword">type</span><span class="token operator">:</span> VNodeTypes\n  props<span class="token operator">:</span> <span class="token punctuation">(</span>VNodeProps <span class="token operator">&amp;</span> ExtraProps<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  ref<span class="token operator">:</span> VNodeNormalizedRef <span class="token operator">|</span> <span class="token keyword">null</span>\n  <span class="token comment">/**\n   * SFC only. This is assigned on vnode creation using currentScopeId\n   * which is set alongside currentRenderingInstance.\n   */</span>\n  scopeId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  <span class="token comment">/**\n   * SFC only. This is assigned to:\n   * - Slot fragment vnodes with :slotted SFC styles.\n   * - Component vnodes (during patch/hydration) so that its root node can\n   *   inherit the component&#39;s slotScopeIds\n   */</span>\n  slotScopeIds<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  children<span class="token operator">:</span> VNodeNormalizedChildren\n  component<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span>\n  dirs<span class="token operator">:</span> DirectiveBinding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// 指令</span>\n  transition<span class="token operator">:</span> TransitionHooks<span class="token operator">&lt;</span>HostElement<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n\n  <span class="token comment">// DOM</span>\n  el<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span>\n  anchor<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// fragment anchor</span>\n  target<span class="token operator">:</span> HostElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// teleport target</span>\n  targetAnchor<span class="token operator">:</span> HostNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// teleport target anchor</span>\n  staticCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// number of elements contained in a static vnode</span>\n\n  <span class="token comment">// suspense</span>\n  suspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span>\n  ssContent<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span>\n  ssFallback<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span>\n\n  <span class="token comment">// optimization only</span>\n  shapeFlag<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// 类型标记</span>\n  patchFlag<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token comment">// diff标记</span>\n  dynamicProps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  dynamicChildren<span class="token operator">:</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n\n  <span class="token comment">// application root node only 只限于根节点</span>\n  appContext<span class="token operator">:</span> AppContext <span class="token operator">|</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="具体实现"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h3><div class="language-ts"><pre><code><span class="token keyword">let</span> vnodeArgsTransformer<span class="token operator">:</span>\n  <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>\n      args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> _createVNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n      instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span>\n    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> _createVNode<span class="token operator">&gt;</span><span class="token punctuation">)</span>\n  <span class="token operator">|</span> <span class="token keyword">undefined</span>\n\n<span class="token comment">/**\n * Internal API for registering an arguments transform for createVNode\n * used for creating stubs in the test-utils\n * It is *internal* but needs to be exposed for test-utils to pick up proper\n * typings\n * \n * 自定义转换器，应该是用于其他库，如uniapp，这里不考虑\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformVNodeArgs</span><span class="token punctuation">(</span>transformer<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> vnodeArgsTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vnodeArgsTransformer <span class="token operator">=</span> transformer\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> createVNodeWithArgsTransform <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> _createVNode<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 首次渲染会执行args，args为组件 </span>\n  <span class="token keyword">return</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span>\n    <span class="token operator">...</span><span class="token punctuation">(</span>vnodeArgsTransformer\n      <span class="token operator">?</span> <span class="token function">vnodeArgsTransformer</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> currentRenderingInstance<span class="token punctuation">)</span>\n      <span class="token operator">:</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> createVNode <span class="token operator">=</span> <span class="token punctuation">(</span>__DEV__\n  <span class="token operator">?</span> createVNodeWithArgsTransform\n  <span class="token operator">:</span> _createVNode<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">typeof</span> _createVNode\n\n<span class="token keyword">function</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> VNodeTypes <span class="token operator">|</span> ClassComponent <span class="token operator">|</span> <span class="token keyword">typeof</span> <span class="token constant">NULL_DYNAMIC_COMPONENT</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">(</span>Data <span class="token operator">&amp;</span> VNodeProps<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  patchFlag<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  dynamicProps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  isBlockNode <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 是否为块节点</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">type</span> <span class="token operator">||</span> <span class="token keyword">type</span> <span class="token operator">===</span> <span class="token constant">NULL_DYNAMIC_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid vnode type when creating vnode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">type</span> <span class="token operator">=</span> Comment\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 判断是否为Vnode，Vnode会存在__v_isVNode属性标识该节点为vnode</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVNode</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// createVNode receiving an existing vnode. This happens in cases like</span>\n    <span class="token comment">// &lt;component :is=&quot;vnode&quot;/&gt;</span>\n    <span class="token comment">// #2078 make sure to merge refs during the clone instead of overwriting it</span>\n    <span class="token keyword">const</span> cloned <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* mergeRef: true */</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>cloned<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> cloned\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// class component normalization.</span>\n  <span class="token comment">// 是否为class组件，class组件会通过__vccOpts 作为标识</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClassComponent</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token keyword">type</span><span class="token punctuation">.</span>__vccOpts\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 2.x async/functional component compat 兼容v2的异步/函数 组件</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__COMPAT__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">convertLegacyComponent</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> currentRenderingInstance<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// class &amp; style normalization.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// for reactive or proxy objects, we need to clone it to enable mutation.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">||</span> InternalObjectKey <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      props <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> klass<span class="token punctuation">,</span> style <span class="token punctuation">}</span> <span class="token operator">=</span> props\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>klass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      props<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">=</span> <span class="token function">normalizeClass</span><span class="token punctuation">(</span>klass<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// reactive state objects need to be cloned since they are likely to be</span>\n      <span class="token comment">// mutated</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        style <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> style<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      props<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token function">normalizeStyle</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// encode the vnode type information into a bitmap 将vnode类型进行位运算编码</span>\n  <span class="token comment">/**\n   * 注：\n   *  suspence组件会多__isSuspense属性\n   *  teleport会多一个__isTeleport属性\n   *\n   * if 如果是string 则为1\n   * else if 如果__FEATURE_SUSPENSE__ 并且是suspense组件 则为 128 __FEATURE_SUSPENSE__ 默认为true 通过rollup启动注入\n   * else if 如果是teleport组件为64\n   * else if 如果是对象，则为4\n   * else if 如果是函数，则为2\n   * else 否则为0\n   */</span>\n  <span class="token keyword">const</span> shapeFlag <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n    <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>\n    <span class="token operator">:</span> __FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> <span class="token function">isSuspense</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n      <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span>\n      <span class="token operator">:</span> <span class="token function">isTeleport</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n        <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span>\n        <span class="token operator">:</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n          <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span>\n          <span class="token operator">:</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">FUNCTIONAL_COMPONENT</span>\n            <span class="token operator">:</span> <span class="token number">0</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isProxy</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Vue received a Component which was made a reactive object. This can </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lead to unnecessary performance overhead, and should be avoided by </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">marking the component with \\`markRaw\\` or using \\`shallowRef\\` </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">instead of \\`ref\\`.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\nComponent that was made reactive: </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token keyword">type</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> vnode<span class="token operator">:</span> VNode <span class="token operator">=</span> <span class="token punctuation">{</span>\n    __v_isVNode<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    __v_skip<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token keyword">type</span><span class="token punctuation">,</span>\n    props<span class="token punctuation">,</span>\n    key<span class="token operator">:</span> props <span class="token operator">&amp;&amp;</span> <span class="token function">normalizeKey</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    ref<span class="token operator">:</span> props <span class="token operator">&amp;&amp;</span> <span class="token function">normalizeRef</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    scopeId<span class="token operator">:</span> currentScopeId<span class="token punctuation">,</span>\n    slotScopeIds<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    suspense<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    ssContent<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    ssFallback<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    dirs<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    transition<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    el<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    anchor<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    target<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    targetAnchor<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    staticCount<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    shapeFlag<span class="token punctuation">,</span>\n    patchFlag<span class="token punctuation">,</span>\n    dynamicProps<span class="token punctuation">,</span>\n    dynamicChildren<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    appContext<span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// validate key</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>key <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">VNode created with invalid key (NaN). VNode type:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n\n  <span class="token comment">// normalize suspense children</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> fallback <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">normalizeSuspenseChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>\n    vnode<span class="token punctuation">.</span>ssContent <span class="token operator">=</span> content\n    vnode<span class="token punctuation">.</span>ssFallback <span class="token operator">=</span> fallback\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    shouldTrack <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">// avoid a block node from tracking itself</span>\n    <span class="token operator">!</span>isBlockNode <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">// has current parent block</span>\n    currentBlock <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">// presence of a patch flag indicates this node needs patching on updates.</span>\n    <span class="token comment">// component nodes also should always be patched, because even if the</span>\n    <span class="token comment">// component doesn&#39;t need to update, it needs to persist the instance on to</span>\n    <span class="token comment">// the next vnode so that it can be properly unmounted later.</span>\n    <span class="token punctuation">(</span>patchFlag <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">// the EVENTS flag is only for hydration and if it is the only flag, the</span>\n    <span class="token comment">// vnode should not be considered dynamic due to handler caching.</span>\n    patchFlag <span class="token operator">!==</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">HYDRATE_EVENTS</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    currentBlock<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> vnode\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>上面是<code>Vnode</code>的具体实现，<code>vue-next</code>中会把模板转换成AST，并编译成<code>_createVnode</code>函数从而进行渲染，具体后面再说。</p>',
    10
  )
t.render = function(a, p, t, e, c, l) {
  return n(), s('div', null, [o])
}
export default t
export { p as __pageData }
