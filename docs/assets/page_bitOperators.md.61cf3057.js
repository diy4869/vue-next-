import {
  p as a,
  e as t,
  r as s,
  o as n,
  c as d,
  b as p,
  w as e,
  a as o
} from './app.5846fbd1.js'
const b =
    '{"title":"位运算","description":"","frontmatter":{},"headers":[{"level":2,"title":"位运算","slug":"位运算"},{"level":3,"title":"按位与 AND","slug":"按位与-and"},{"level":3,"title":"按位或 OR","slug":"按位或-or"},{"level":3,"title":"按位异或 XOR","slug":"按位异或-xor"},{"level":3,"title":"按位非 NOT","slug":"按位非-not"},{"level":3,"title":"左移","slug":"左移"},{"level":3,"title":"右移","slug":"右移"},{"level":3,"title":"无符号右移","slug":"无符号右移"},{"level":2,"title":"vue-next对位运算的应用","slug":"vue-next对位运算的应用"},{"level":3,"title":"patchFlags","slug":"patchflags"},{"level":3,"title":"shapFlags","slug":"shapflags"},{"level":3,"title":"slotFlags","slug":"slotflags"}],"relativePath":"page/bitOperators.md","lastUpdated":1622866748899}',
  l = {},
  f = e()
a('data-v-43fb7912')
const v = o(
    '<h2 id="位运算" data-v-43fb7912><a class="header-anchor" href="#位运算" aria-hidden="true" data-v-43fb7912>#</a> 位运算</h2><p data-v-43fb7912>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noopener noreferrer" data-v-43fb7912>位运算</a></p><p data-v-43fb7912>JS对数字的存储是以<code data-v-43fb7912>IEEE-754</code> 64位格式进行存储的，但是位运算并不会直接操作64位的值，而是先将64位转成32位进行计算，最后在将结果转换为64位。 如果转成2进制不足32位，则会转成先转成32位进行计算，不足的部分用0进行填充。如果超过则丢弃不要，<span style="color:red;" data-v-43fb7912>在计算机中，最左边为高位，最右边为低位</span></p><p style="color:red;" data-v-43fb7912>本篇为了方便了解，全部采用32位进行标记</p><html data-v-43fb7912><table data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>语法</td><td width="100" data-v-43fb7912>例子</td><td data-v-43fb7912>描述</td></tr><tr data-v-43fb7912><td data-v-43fb7912>按位与 AND</td><td data-v-43fb7912>a &amp; b</td><td data-v-43fb7912>在a，b的位表示中，每一个对应的位都为1则返回1， 否则返回0</td></tr><tr data-v-43fb7912><td data-v-43fb7912>按位或 OR</td><td data-v-43fb7912>a | b</td><td data-v-43fb7912>在a，b的位表示中，每一个对应的位，只要有一个为1则返回1， 否则返回0</td></tr><tr data-v-43fb7912><td data-v-43fb7912>按位异或 XOR</td><td data-v-43fb7912>a ^ b</td><td data-v-43fb7912>在a，b的位表示中，每一个对应的位，两个不相同则返回1，相同则返回0</td></tr><tr data-v-43fb7912><td data-v-43fb7912>按位非 NOT</td><td data-v-43fb7912>~a</td><td data-v-43fb7912>对每位进行取反</td></tr><tr data-v-43fb7912><td data-v-43fb7912>左移</td><td data-v-43fb7912>a &lt;&lt; b</td><td data-v-43fb7912><p data-v-43fb7912>将a的二进制串向左移动b位，低位空缺补0，高位溢出不要</p><p data-v-43fb7912>左移不考虑正负数</p></td></tr><tr data-v-43fb7912><td data-v-43fb7912>右移</td><td data-v-43fb7912>a &gt;&gt; b</td><td data-v-43fb7912><p data-v-43fb7912>把a的二进制表示向右移动b位</p><p data-v-43fb7912>正数 右移的时候，最高位补0，低位舍去</p><p data-v-43fb7912>负数 右移的时候，最高位补1，低位舍去</p></td></tr><tr data-v-43fb7912><td data-v-43fb7912><span data-v-43fb7912>无符号右移</span><p data-v-43fb7912>(左边空出位用0填充)</p></td><td data-v-43fb7912>a &gt;&gt;&gt; b</td><td data-v-43fb7912>把a的二进制表示向右移动b位，溢出舍去，高位补0（不处理正负数，高位不0）</td></tr></table></html><h3 id="按位与-and" data-v-43fb7912><a class="header-anchor" href="#按位与-and" aria-hidden="true" data-v-43fb7912>#</a> 按位与 AND</h3><ul data-v-43fb7912><li data-v-43fb7912>每一位相同为1，不同为0</li></ul><html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td width="100" data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>5 &amp; 5</td><td data-v-43fb7912><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0101</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0101</p></td><td data-v-43fb7912><p data-v-43fb7912>5</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0101</p></td></tr><tr data-v-43fb7912><td data-v-43fb7912>5 &amp; 10</td><td data-v-43fb7912><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0101</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1010</p></td><td data-v-43fb7912><p data-v-43fb7912>5</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0000</p></td></tr></table></html><h3 id="按位或-or" data-v-43fb7912><a class="header-anchor" href="#按位或-or" aria-hidden="true" data-v-43fb7912>#</a> 按位或 OR</h3><ul data-v-43fb7912><li data-v-43fb7912>只要每个对应的位有1个是1就为1，否则为0 <html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td width="100" data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>10 | 22</td><td data-v-43fb7912><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1010</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0001 0110</p></td><td data-v-43fb7912><p data-v-43fb7912>30</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0001 1110</p></td></tr></table></html></li></ul><h3 id="按位异或-xor" data-v-43fb7912><a class="header-anchor" href="#按位异或-xor" aria-hidden="true" data-v-43fb7912>#</a> 按位异或 XOR</h3><ul data-v-43fb7912><li data-v-43fb7912>每个对应的位，不同为1，相同为0 <html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td width="100" data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>10 ^ 22</td><td data-v-43fb7912><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1010</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0001 0110</p></td><td data-v-43fb7912><p data-v-43fb7912>28</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0001 1100</p></td></tr></table></html></li></ul><h3 id="按位非-not" data-v-43fb7912><a class="header-anchor" href="#按位非-not" aria-hidden="true" data-v-43fb7912>#</a> 按位非 NOT</h3><ul data-v-43fb7912><li data-v-43fb7912>对每个位进行取反</li></ul><p data-v-43fb7912>注意：</p><ul data-v-43fb7912><li data-v-43fb7912>在进行按位非运算时，所有数字的计算结果都是<code data-v-43fb7912>~(x + 1)</code></li><li data-v-43fb7912><p data-v-43fb7912>由于对数字<code data-v-43fb7912>~-1</code>和<code data-v-43fb7912>~4294967295</code> (2<sup data-v-43fb7912>32</sup>-1) 使用32位表示形式，结果均为0。</p></li></ul><html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td width="100" data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>~10</td><td data-v-43fb7912><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1011</p></td><td data-v-43fb7912><p data-v-43fb7912>-11</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0100</p></td></tr></table></html><h3 id="左移" data-v-43fb7912><a class="header-anchor" href="#左移" aria-hidden="true" data-v-43fb7912>#</a> 左移</h3><ul data-v-43fb7912><li data-v-43fb7912>向左移动n位，低位补0，高位不要</li></ul><html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td width="100" data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>2 &lt;&lt; 2 </td><td data-v-43fb7912><p data-v-43fb7912>2</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0010</p></td><td data-v-43fb7912><p data-v-43fb7912>8</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1000</p></td></tr></table></html><h3 id="右移" data-v-43fb7912><a class="header-anchor" href="#右移" aria-hidden="true" data-v-43fb7912>#</a> 右移</h3><ul data-v-43fb7912><li data-v-43fb7912>向右移动n位</li></ul><html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>10 &gt;&gt; 2 </td><td data-v-43fb7912><p data-v-43fb7912>10</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1010</p></td><td data-v-43fb7912><p data-v-43fb7912>2</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 0010</p></td></tr></table></html><h3 id="无符号右移" data-v-43fb7912><a class="header-anchor" href="#无符号右移" aria-hidden="true" data-v-43fb7912>#</a> 无符号右移</h3><ul data-v-43fb7912><li data-v-43fb7912>把a的二进制表示向右移动b位，溢出舍去，高位补0（不处理正负数，高位不0</li></ul><html data-v-43fb7912><table class="bitOperators" data-v-43fb7912><tr data-v-43fb7912><td data-v-43fb7912>例子</td><td data-v-43fb7912>二进制</td><td data-v-43fb7912>结果/对应的二进制</td></tr><tr data-v-43fb7912><td data-v-43fb7912>54 &gt;&gt;&gt; 2 </td><td data-v-43fb7912><p data-v-43fb7912>54</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0011 0110</p></td><td data-v-43fb7912><p data-v-43fb7912>13</p><p data-v-43fb7912>0000 0000 0000 0000 0000 0000 0000 1101</p></td></tr></table></html>',
    26
  ),
  c = o(
    '<h2 id="vue-next对位运算的应用" data-v-43fb7912><a class="header-anchor" href="#vue-next对位运算的应用" aria-hidden="true" data-v-43fb7912>#</a> vue-next对位运算的应用</h2><p data-v-43fb7912>在<code data-v-43fb7912>vue-next</code>中，充满了大量对位运算的操作，主要是针对一些内容做的标记，如：</p><ul data-v-43fb7912><li data-v-43fb7912>patchFlags 编译优化相关</li><li data-v-43fb7912>shapFlags 标记当前元素类型</li><li data-v-43fb7912>slotFlags slot相关</li></ul><h3 id="patchflags" data-v-43fb7912><a class="header-anchor" href="#patchflags" aria-hidden="true" data-v-43fb7912>#</a> patchFlags</h3><p data-v-43fb7912>代码在<code data-v-43fb7912>packages/shared/src/patchFlags.ts</code></p><div class="language-ts" data-v-43fb7912><pre data-v-43fb7912><code data-v-43fb7912><span class="token keyword" data-v-43fb7912>export</span> <span class="token keyword" data-v-43fb7912>const</span> <span class="token keyword" data-v-43fb7912>enum</span> PatchFlags <span class="token punctuation" data-v-43fb7912>{</span>\n  <span class="token constant" data-v-43fb7912>TEXT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 动态文本</span>\n  <span class="token constant" data-v-43fb7912>CLASS</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 2 动态class</span>\n  <span class="token class-name" data-v-43fb7912><span class="token constant" data-v-43fb7912>STYLE</span></span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>2</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 4 动态style</span>\n  <span class="token constant" data-v-43fb7912>PROPS</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>3</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 8</span>\n  <span class="token constant" data-v-43fb7912>FULL_PROPS</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>4</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 16</span>\n  <span class="token constant" data-v-43fb7912>HYDRATE_EVENTS</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>5</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 32</span>\n  <span class="token constant" data-v-43fb7912>STABLE_FRAGMENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>6</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 64</span>\n  <span class="token constant" data-v-43fb7912>KEYED_FRAGMENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>7</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 128</span>\n  <span class="token constant" data-v-43fb7912>UNKEYED_FRAGMENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>8</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 256</span>\n  <span class="token constant" data-v-43fb7912>NEED_PATCH</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>9</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 512</span>\n  <span class="token constant" data-v-43fb7912>DYNAMIC_SLOTS</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>10</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 1024</span>\n  <span class="token constant" data-v-43fb7912>DEV_ROOT_FRAGMENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>11</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 2048</span>\n  <span class="token constant" data-v-43fb7912>HOISTED</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token operator" data-v-43fb7912>-</span><span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span>\n  <span class="token constant" data-v-43fb7912>BAIL</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token operator" data-v-43fb7912>-</span><span class="token number" data-v-43fb7912>2</span>\n<span class="token punctuation" data-v-43fb7912>}</span>\n\n</code></pre></div><h3 id="shapflags" data-v-43fb7912><a class="header-anchor" href="#shapflags" aria-hidden="true" data-v-43fb7912>#</a> shapFlags</h3><p data-v-43fb7912>代码在<code data-v-43fb7912>packages/shared/src/shapeFlags.ts</code></p><div class="language-ts" data-v-43fb7912><pre data-v-43fb7912><code data-v-43fb7912><span class="token keyword" data-v-43fb7912>export</span> <span class="token keyword" data-v-43fb7912>const</span> <span class="token keyword" data-v-43fb7912>enum</span> ShapeFlags <span class="token punctuation" data-v-43fb7912>{</span>\n  <span class="token constant" data-v-43fb7912>ELEMENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span>\n  <span class="token constant" data-v-43fb7912>FUNCTIONAL_COMPONENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 2</span>\n  <span class="token constant" data-v-43fb7912>STATEFUL_COMPONENT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>2</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 4</span>\n  <span class="token constant" data-v-43fb7912>TEXT_CHILDREN</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>3</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 8</span>\n  <span class="token constant" data-v-43fb7912>ARRAY_CHILDREN</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>4</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 16</span>\n  <span class="token constant" data-v-43fb7912>SLOTS_CHILDREN</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>5</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 32</span>\n  <span class="token constant" data-v-43fb7912>TELEPORT</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>6</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 64</span>\n  <span class="token constant" data-v-43fb7912>SUSPENSE</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>7</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 128</span>\n  <span class="token constant" data-v-43fb7912>COMPONENT_SHOULD_KEEP_ALIVE</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>8</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 256</span>\n  <span class="token constant" data-v-43fb7912>COMPONENT_KEPT_ALIVE</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span> <span class="token operator" data-v-43fb7912>&lt;&lt;</span> <span class="token number" data-v-43fb7912>9</span><span class="token punctuation" data-v-43fb7912>,</span> <span class="token comment" data-v-43fb7912>// 512</span>\n  <span class="token constant" data-v-43fb7912>COMPONENT</span> <span class="token operator" data-v-43fb7912>=</span> ShapeFlags<span class="token punctuation" data-v-43fb7912>.</span><span class="token constant" data-v-43fb7912>STATEFUL_COMPONENT</span> <span class="token operator" data-v-43fb7912>|</span> ShapeFlags<span class="token punctuation" data-v-43fb7912>.</span><span class="token constant" data-v-43fb7912>FUNCTIONAL_COMPONENT</span> <span class="token comment" data-v-43fb7912>// 4 | 2</span>\n<span class="token punctuation" data-v-43fb7912>}</span>\n\n</code></pre></div><h3 id="slotflags" data-v-43fb7912><a class="header-anchor" href="#slotflags" aria-hidden="true" data-v-43fb7912>#</a> slotFlags</h3><p data-v-43fb7912>代码在<code data-v-43fb7912>packages/shared/src/slotFlags.ts</code></p><div class="language-ts" data-v-43fb7912><pre data-v-43fb7912><code data-v-43fb7912><span class="token keyword" data-v-43fb7912>export</span> <span class="token keyword" data-v-43fb7912>const</span> <span class="token keyword" data-v-43fb7912>enum</span> SlotFlags <span class="token punctuation" data-v-43fb7912>{</span>\n  <span class="token comment" data-v-43fb7912>/**\n   * Stable slots that only reference slot props or context state. The slot\n   * can fully capture its own dependencies so when passed down the parent won&#39;t\n   * need to force the child to update.\n   */</span>\n  <span class="token constant" data-v-43fb7912>STABLE</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>1</span><span class="token punctuation" data-v-43fb7912>,</span>\n  <span class="token comment" data-v-43fb7912>/**\n   * Slots that reference scope variables (v-for or an outer slot prop), or\n   * has conditional structure (v-if, v-for). The parent will need to force\n   * the child to update because the slot does not fully capture its dependencies.\n   */</span>\n  <span class="token constant" data-v-43fb7912>DYNAMIC</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>2</span><span class="token punctuation" data-v-43fb7912>,</span>\n  <span class="token comment" data-v-43fb7912>/**\n   * `&lt;slot/&gt;` being forwarded into a child component. Whether the parent needs\n   * to update the child is dependent on what kind of slots the parent itself\n   * received. This has to be refined at runtime, when the child&#39;s vnode\n   * is being created (in `normalizeChildren`)\n   */</span>\n  <span class="token constant" data-v-43fb7912>FORWARDED</span> <span class="token operator" data-v-43fb7912>=</span> <span class="token number" data-v-43fb7912>3</span>\n<span class="token punctuation" data-v-43fb7912>}</span>\n</code></pre></div>',
    12
  )
t()
const r = f((a, t, e, o, b, l) => {
  const f = s('ClientOnly')
  return n(), d('div', null, [v, p(f), c])
})
;(l.render = r), (l.__scopeId = 'data-v-43fb7912')
export default l
export { b as __pageData }
