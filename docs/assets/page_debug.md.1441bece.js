import { o as n, c as s, a as t } from './app.547ab472.js'
const a =
    '{"title":"步骤","description":"","frontmatter":{},"headers":[{"level":2,"title":"步骤","slug":"步骤"},{"level":2,"title":"生成目录树","slug":"生成目录树"},{"level":2,"title":"vue-next源码结构","slug":"vue-next源码结构"},{"level":2,"title":"完整目录","slug":"完整目录"}],"relativePath":"page/debug.md","lastUpdated":1641361757100}',
  e = {},
  p = t(
    '<h2 id="步骤"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><ul><li>step zero</li></ul><div class="language-bash"><pre><code><span class="token function">git</span> clone https://github.com/vuejs/vue-next.git\n</code></pre></div><ul><li>step one</li></ul><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span>\n</code></pre></div><ul><li>step two 执行完这个命令后，vue会在<code>packages/vue/dist</code>下生成一个<code>vue.global.js</code></li></ul><div class="language-bash"><pre><code><span class="token function">npm</span> run dev --sourcemap\n</code></pre></div><ul><li>step three 创建一个debug目录，然后创建index.html，引入刚才生成的文件</li></ul><div class="language-shell"><pre><code><span class="token function">mkdir</span> debug\n<span class="token function">touch</span> index.html\n</code></pre></div><ul><li>step four</li></ul><p>然后在<code>index.html</code>写下如下内容就可以愉快的debug源码了，注意npm run dev启动的服务不要关，他会监听你在当前目录下所做的所有更改。</p><p><code>createApp</code>入口在<code>packages/runtime-core/src/index.ts</code>下。</p><p>新手教程到此结束，然就可以尽情的<code>debug</code>了，如果要提交代码到自己仓库的话，注意commit规范，详细可以百度搜索<code>commitlint</code>。</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        {{ count }}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../packages/vue/dist/vue.global.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> Vue\n\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>\n                count<span class="token punctuation">.</span>value<span class="token operator">++</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                count<span class="token punctuation">,</span>\n                add\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="生成目录树"><a class="header-anchor" href="#生成目录树" aria-hidden="true">#</a> 生成目录树</h2><p>只要通过<code>tree</code>命令，就可以生成目录树，具体操作如下</p><div class="language-bash"><pre><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tree\n\n<span class="token comment"># 生成目录树</span>\ntree\n\n<span class="token comment"># 过滤掉node_modules</span>\ntree -I <span class="token string">&quot;node_modules&quot;</span>\n\n<span class="token comment"># 生成指定层级的目录tree</span>\ntree -L <span class="token number">2</span>\n</code></pre></div><p>该命令需要在<code>wsl</code>下执行，如果在cmd下执行会报参数过长，其他命令自行执行<code>tree --help</code></p><h2 id="vue-next源码结构"><a class="header-anchor" href="#vue-next源码结构" aria-hidden="true">#</a> vue-next源码结构</h2><div class="language-bash"><pre><code>├── CHANGELOG.md\n├── LICENSE\n├── README.md\n├── api-extractor.json\n├── example <span class="token comment"># 我写的（用于debug）</span>\n│   └── index.html\n├── jest.config.js\n├── package-lock.json\n├── package.json\n├── packages\n│   ├── compiler-core <span class="token comment"># 编译核心</span>\n│   ├── compiler-dom  <span class="token comment"># 编译dom</span>\n│   ├── compiler-sfc \n│   ├── compiler-ssr <span class="token comment"># 编译ssr</span>\n│   ├── global.d.ts\n│   ├── reactivity <span class="token comment"># 响应式</span>\n│   ├── runtime-core <span class="token comment"># 运行核心</span>\n│   ├── runtime-dom <span class="token comment"># 运行时的 dom</span>\n│   ├── runtime-test <span class="token comment"># test</span>\n│   ├── server-renderer <span class="token comment"># ssr部分</span>\n│   ├── shared <span class="token comment"># dalao的工具库（dalao 喜欢的命名，cli也是这个名字）</span>\n│   ├── size-check\n│   ├── template-explorer\n│   └── vue <span class="token comment"># build后生成的vue目录</span>\n├── rollup.config.js\n├── scripts <span class="token comment"># 一些脚本</span>\n│   ├── bootstrap.js <span class="token comment"># 自动生成package.json、readme.md</span>\n│   ├── build.js <span class="token comment"># 打包</span>\n│   ├── checkYarn.js <span class="token comment"># 校验yarn版本</span>\n│   ├── dev.js <span class="token comment"># 启动脚本</span>\n│   ├── release.js <span class="token comment"># 发布</span>\n│   ├── setupJestEnv.ts\n│   ├── utils.js\n│   └── verifyCommit.js <span class="token comment"># commit 校验</span>\n├── test-dts <span class="token comment"># 一些测试</span>\n│   ├── README.md\n│   ├── component.test-d.ts\n│   ├── componentTypeExtensions.test-d.tsx\n│   ├── defineComponent.test-d.tsx\n│   ├── functionalComponent.test-d.tsx\n│   ├── h.test-d.ts\n│   ├── index.d.ts\n│   ├── inject.test-d.ts\n│   ├── reactivity.test-d.ts\n│   ├── ref.test-d.ts\n│   ├── setupHelpers.test-d.ts\n│   ├── tsconfig.build.json\n│   ├── tsconfig.json\n│   ├── tsx.test-d.tsx\n│   └── watch.test-d.ts\n├── tsconfig.json\n└── yarn.lock\n</code></pre></div><h2 id="完整目录"><a class="header-anchor" href="#完整目录" aria-hidden="true">#</a> 完整目录</h2><div class="language-bash"><pre><code>├── CHANGELOG.md\n├── LICENSE\n├── README.md\n├── api-extractor.json\n├── example\n│   ├── index.html\n│   └── test.html\n├── jest.config.js\n├── package-lock.json\n├── package.json\n├── packages\n│   ├── compiler-core <span class="token comment"># 编译核心</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js \n│   │   ├── package.json\n│   │   └── src\n│   │       ├── ast.ts <span class="token comment">#  AST 类型</span>\n│   │       ├── codegen.ts <span class="token comment"># 代码生成</span>\n│   │       ├── compat <span class="token comment"># 兼容</span>\n│   │       │   ├── compatConfig.ts\n│   │       │   └── transformFilter.ts\n│   │       ├── compile.ts <span class="token comment"># 编译入口</span>\n│   │       ├── errors.ts <span class="token comment"># 编译的错误代码</span>\n│   │       ├── index.ts\n│   │       ├── options.ts <span class="token comment"># 编译选项</span>\n│   │       ├── parse.ts <span class="token comment"># AST 解析</span>\n│   │       ├── runtimeHelpers.ts <span class="token comment"># 代码生成期间的帮助函数 （这个会在转换期间就会生成对应的帮助函数，从而在生成阶段进行调用）</span>\n│   │       ├── transform.ts <span class="token comment"># 转换入口</span>\n│   │       ├── transforms\n│   │       │   ├── hoistStatic.ts <span class="token comment"># 静态提升</span>\n│   │       │   ├── noopDirectiveTransform.ts\n│   │       │   ├── transformElement.ts <span class="token comment"># 转换元素 (所有指令、文本都会在这一个阶段进行调用，并生成 patchFlag)</span>\n│   │       │   ├── transformExpression.ts <span class="token comment"># 转换表达式</span>\n│   │       │   ├── transformSlotOutlet.ts <span class="token comment"># 转换 slot</span>\n│   │       │   ├── transformText.ts <span class="token comment"># 转换 文本</span>\n│   │       │   ├── vBind.ts\n│   │       │   ├── vFor.ts\n│   │       │   ├── vIf.ts\n│   │       │   ├── vModel.ts\n│   │       │   ├── vOn.ts\n│   │       │   ├── vOnce.ts\n│   │       │   └── vSlot.ts\n│   │       ├── utils.ts <span class="token comment"># 解析期间的一些工具函数</span>\n│   │       └── validateExpression.ts <span class="token comment"># 解析期间去校验 class 等一些表达式</span>\n│   ├── compiler-dom\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── decodeHtml.ts\n│   │       ├── decodeHtmlBrowser.ts\n│   │       ├── errors.ts\n│   │       ├── index.ts\n│   │       ├── namedChars.json\n│   │       ├── parserOptions.ts\n│   │       ├── runtimeHelpers.ts\n│   │       └── transforms\n│   │           ├── ignoreSideEffectTags.ts\n│   │           ├── stringifyStatic.ts\n│   │           ├── transformStyle.ts\n│   │           ├── vHtml.ts\n│   │           ├── vModel.ts\n│   │           ├── vOn.ts\n│   │           ├── vShow.ts\n│   │           ├── vText.ts\n│   │           └── warnTransitionChildren.ts\n│   ├── compiler-sfc <span class="token comment"># SFC 新功能 没看过，所以就不标注了</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── compileScript.ts\n│   │       ├── compileStyle.ts\n│   │       ├── compileTemplate.ts\n│   │       ├── cssVars.ts\n│   │       ├── index.ts\n│   │       ├── parse.ts\n│   │       ├── rewriteDefault.ts\n│   │       ├── shims.d.ts\n│   │       ├── stylePluginScoped.ts\n│   │       ├── stylePluginTrim.ts\n│   │       ├── stylePreprocessors.ts\n│   │       ├── templateTransformAssetUrl.ts\n│   │       ├── templateTransformSrcset.ts\n│   │       ├── templateUtils.ts\n│   │       └── warn.ts\n│   ├── compiler-ssr  <span class="token comment"># SSR 服务端渲染 没看过，所以就不标注了</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── errors.ts\n│   │       ├── index.ts\n│   │       ├── runtimeHelpers.ts\n│   │       ├── ssrCodegenTransform.ts\n│   │       └── transforms\n│   │           ├── ssrInjectCssVars.ts\n│   │           ├── ssrInjectFallthroughAttrs.ts\n│   │           ├── ssrTransformComponent.ts\n│   │           ├── ssrTransformElement.ts\n│   │           ├── ssrTransformSlotOutlet.ts\n│   │           ├── ssrTransformSuspense.ts\n│   │           ├── ssrTransformTeleport.ts\n│   │           ├── ssrTransformTransitionGroup.ts\n│   │           ├── ssrVFor.ts\n│   │           ├── ssrVIf.ts\n│   │           ├── ssrVModel.ts\n│   │           └── ssrVShow.ts\n│   ├── global.d.ts\n│   ├── reactivity <span class="token comment"># 响应式</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── baseHandlers.ts\n│   │       ├── collectionHandlers.ts\n│   │       ├── computed.ts\n│   │       ├── effect.ts\n│   │       ├── index.ts\n│   │       ├── operations.ts\n│   │       ├── reactive.ts\n│   │       └── ref.ts\n│   ├── runtime-core\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   ├── src\n│   │   │   ├── apiAsyncComponent.ts\n│   │   │   ├── apiComputed.ts <span class="token comment"># computed</span>\n│   │   │   ├── apiCreateApp.ts <span class="token comment"># createApp 实例</span>\n│   │   │   ├── apiDefineComponent.ts <span class="token comment"># defineComponent 组件</span>\n│   │   │   ├── apiInject.ts <span class="token comment"># provide inject</span>\n│   │   │   ├── apiLifecycle.ts <span class="token comment"># 生命周期</span>\n│   │   │   ├── apiSetupHelpers.ts\n│   │   │   ├── apiWatch.ts <span class="token comment"># watch watchEffect</span>\n│   │   │   ├── compat <span class="token comment"># 兼容</span>\n│   │   │   │   ├── attrsFallthrough.ts\n│   │   │   │   ├── compatConfig.ts\n│   │   │   │   ├── component.ts\n│   │   │   │   ├── customDirective.ts\n│   │   │   │   ├── data.ts\n│   │   │   │   ├── filter.ts\n│   │   │   │   ├── global.ts\n│   │   │   │   ├── globalConfig.ts\n│   │   │   │   ├── instance.ts\n│   │   │   │   ├── instanceChildren.ts\n│   │   │   │   ├── instanceEventEmitter.ts\n│   │   │   │   ├── instanceListeners.ts\n│   │   │   │   ├── props.ts\n│   │   │   │   ├── ref.ts\n│   │   │   │   ├── renderFn.ts\n│   │   │   │   ├── renderHelpers.ts\n│   │   │   │   └── vModel.ts\n│   │   │   ├── component.ts <span class="token comment"># 组件相关（创建组件、执行 setup 安装组件、渲染组件、更新组件）</span>\n│   │   │   ├── componentEmits.ts\n│   │   │   ├── componentOptions.ts\n│   │   │   ├── componentProps.ts\n│   │   │   ├── componentPublicInstance.ts\n│   │   │   ├── componentRenderContext.ts\n│   │   │   ├── componentRenderUtils.ts\n│   │   │   ├── componentSlots.ts\n│   │   │   ├── components\n│   │   │   │   ├── BaseTransition.ts\n│   │   │   │   ├── KeepAlive.ts\n│   │   │   │   ├── Suspense.ts\n│   │   │   │   └── Teleport.ts\n│   │   │   ├── customFormatter.ts\n│   │   │   ├── devtools.ts\n│   │   │   ├── directives.ts <span class="token comment"># 指令</span>\n│   │   │   ├── errorHandling.ts\n│   │   │   ├── featureFlags.ts\n│   │   │   ├── h.ts <span class="token comment"># 渲染函数</span>\n│   │   │   ├── helpers\n│   │   │   │   ├── createSlots.ts\n│   │   │   │   ├── renderList.ts\n│   │   │   │   ├── renderSlot.ts\n│   │   │   │   ├── resolveAssets.ts\n│   │   │   │   ├── toHandlers.ts\n│   │   │   │   ├── typeUtils.ts\n│   │   │   │   └── useSsrContext.ts\n│   │   │   ├── hmr.ts\n│   │   │   ├── hydration.ts\n│   │   │   ├── index.ts\n│   │   │   ├── profiling.ts\n│   │   │   ├── renderer.ts <span class="token comment"># 核心 (用于渲染、更新组件，并且  createApp 也是由该文件返回)</span>\n│   │   │   ├── scheduler.ts\n│   │   │   ├── vnode.ts <span class="token comment"># vnode 相关</span>\n│   │   │   └── warning.ts\n│   │   └── types\n│   │       └── refBail.d.ts\n│   ├── runtime-dom <span class="token comment"># 运行 dom 生成 vnode 后，会掉用这块的函数用来创建标签 节点、渲染你等</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   ├── src\n│   │   │   ├── components\n│   │   │   │   ├── Transition.ts\n│   │   │   │   └── TransitionGroup.ts\n│   │   │   ├── directives\n│   │   │   │   ├── vModel.ts\n│   │   │   │   ├── vOn.ts\n│   │   │   │   └── vShow.ts\n│   │   │   ├── helpers\n│   │   │   │   ├── useCssModule.ts\n│   │   │   │   └── useCssVars.ts\n│   │   │   ├── index.ts <span class="token comment"># createApp 的入口，Vue 会在这里获取挂在节点，创建createRenderer，并调用 createApp.mount 方法进行渲染</span>\n│   │   │   ├── modules\n│   │   │   │   ├── attrs.ts\n│   │   │   │   ├── class.ts\n│   │   │   │   ├── events.ts\n│   │   │   │   ├── props.ts\n│   │   │   │   └── style.ts\n│   │   │   ├── nodeOps.ts\n│   │   │   └── patchProp.ts\n│   │   └── types\n│   │       ├── jsx.d.ts\n│   │       └── refBail.d.ts\n│   ├── runtime-test\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── index.ts\n│   │       ├── nodeOps.ts\n│   │       ├── patchProp.ts\n│   │       ├── serialize.ts\n│   │       └── triggerEvent.ts\n│   ├── server-renderer <span class="token comment"># SSR</span>\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── helpers\n│   │       │   ├── ssrCompile.ts\n│   │       │   ├── ssrInterpolate.ts\n│   │       │   ├── ssrRenderAttrs.ts\n│   │       │   ├── ssrRenderComponent.ts\n│   │       │   ├── ssrRenderList.ts\n│   │       │   ├── ssrRenderSlot.ts\n│   │       │   ├── ssrRenderSuspense.ts\n│   │       │   ├── ssrRenderTeleport.ts\n│   │       │   └── ssrVModelHelpers.ts\n│   │       ├── index.ts\n│   │       ├── render.ts\n│   │       ├── renderToStream.ts\n│   │       └── renderToString.ts\n│   ├── sfc-playground\n│   │   ├── index.html\n│   │   ├── package-lock.json\n│   │   ├── package.json\n│   │   ├── public\n│   │   │   └── logo.svg\n│   │   ├── src\n│   │   │   ├── App.vue\n│   │   │   ├── Header.vue\n│   │   │   ├── Message.vue\n│   │   │   ├── SplitPane.vue\n│   │   │   ├── codemirror\n│   │   │   │   ├── CodeMirror.vue\n│   │   │   │   ├── codemirror.css\n│   │   │   │   └── codemirror.ts\n│   │   │   ├── download\n│   │   │   │   ├── download.ts\n│   │   │   │   └── template\n│   │   │   │       ├── README.md\n│   │   │   │       ├── index.html\n│   │   │   │       ├── main.js\n│   │   │   │       ├── package.json\n│   │   │   │       └── vite.config.js\n│   │   │   ├── editor\n│   │   │   │   ├── Editor.vue\n│   │   │   │   └── FileSelector.vue\n│   │   │   ├── main.ts\n│   │   │   ├── output\n│   │   │   │   ├── Output.vue\n│   │   │   │   ├── Preview.vue\n│   │   │   │   ├── PreviewProxy.ts\n│   │   │   │   ├── moduleCompiler.ts\n│   │   │   │   └── srcdoc.html\n│   │   │   ├── sfcCompiler.ts\n│   │   │   ├── store.ts\n│   │   │   ├── utils.ts\n│   │   │   └── vue-dev-proxy.ts\n│   │   └── vite.config.ts\n│   ├── shared <span class="token comment"># dalao 的工具函数</span>\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── codeframe.ts\n│   │       ├── domAttrConfig.ts\n│   │       ├── domTagConfig.ts\n│   │       ├── escapeHtml.ts\n│   │       ├── globalsWhitelist.ts\n│   │       ├── index.ts\n│   │       ├── looseEqual.ts\n│   │       ├── makeMap.ts\n│   │       ├── normalizeProp.ts\n│   │       ├── patchFlags.ts\n│   │       ├── shapeFlags.ts\n│   │       ├── slotFlags.ts\n│   │       └── toDisplayString.ts\n│   ├── size-check\n│   │   ├── README.md\n│   │   ├── package.json\n│   │   └── src\n│   │       └── index.ts\n│   ├── template-explorer\n│   │   ├── README.md\n│   │   ├── index.html\n│   │   ├── local.html\n│   │   ├── package.json\n│   │   ├── src\n│   │   │   ├── index.ts\n│   │   │   ├── options.ts\n│   │   │   └── theme.ts\n│   │   └── style.css\n│   ├── vue\n│   │   ├── LICENSE\n│   │   ├── README.md\n│   │   ├── api-extractor.json\n│   │   ├── index.js\n│   │   ├── package.json\n│   │   └── src\n│   │       ├── dev.ts\n│   │       ├── index.ts\n│   │       └── runtime.ts\n│   └── vue-compat\n│       ├── README.md\n│       ├── api-extractor.json\n│       ├── index.js\n│       ├── package.json\n│       └── src\n│           ├── createCompatVue.ts\n│           ├── dev.ts\n│           ├── esm-index.ts\n│           ├── esm-runtime.ts\n│           ├── index.ts\n│           └── runtime.ts\n├── rollup.config.js\n├── scripts\n│   ├── bootstrap.js\n│   ├── build.js\n│   ├── checkYarn.js\n│   ├── copy.js\n│   ├── dev.js\n│   ├── release.js\n│   ├── setupJestEnv.ts\n│   ├── utils.js\n│   └── verifyCommit.js\n├── tsconfig.json\n└── yarn.lock\n</code></pre></div>',
    22
  )
e.render = function(t, a, e, o, c, l) {
  return n(), s('div', null, [p])
}
export default e
export { a as __pageData }
