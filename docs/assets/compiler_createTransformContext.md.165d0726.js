import { o as n, c as s, a } from './app.03151976.js'
const t =
    '{"title":"createTransformContext 创建转换器上下文","description":"","frontmatter":{},"headers":[{"level":2,"title":"createTransformContext 创建转换器上下文","slug":"createtransformcontext-创建转换器上下文"}],"relativePath":"compiler/createTransformContext.md","lastUpdated":1625810040415}',
  p = {},
  o = a(
    '<h2 id="createtransformcontext-创建转换器上下文"><a class="header-anchor" href="#createtransformcontext-创建转换器上下文" aria-hidden="true">#</a> createTransformContext 创建转换器上下文</h2><p>这部分主要就是通过一个对象，内部去维护了一些数据，用于在之后的过程中进行转换，整体并没什么太多内容。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>\n  root<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    filename <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    prefixIdentifiers <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    hoistStatic <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    cacheHandlers <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    nodeTransforms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    directiveTransforms <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    transformHoist <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    isBuiltInComponent <span class="token operator">=</span> <span class="token constant">NOOP</span><span class="token punctuation">,</span>\n    isCustomElement <span class="token operator">=</span> <span class="token constant">NOOP</span><span class="token punctuation">,</span>\n    expressionPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    scopeId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    slotted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    ssr <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    ssrCssVars <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    bindingMetadata <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span>\n    inline <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isTS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    onError <span class="token operator">=</span> defaultOnError<span class="token punctuation">,</span>\n    onWarn <span class="token operator">=</span> defaultOnWarn<span class="token punctuation">,</span>\n    compatConfig\n  <span class="token punctuation">}</span><span class="token operator">:</span> TransformOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> TransformContext <span class="token punctuation">{</span>\n  <span class="token comment">// 匹配文件名，应该是用于.vue文件</span>\n  <span class="token keyword">const</span> nameMatch <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\?.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^/\\\\]+)\\.\\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> \n  <span class="token keyword">const</span> context<span class="token operator">:</span> TransformContext <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token comment">// options</span>\n    selfName<span class="token operator">:</span> nameMatch <span class="token operator">&amp;&amp;</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token function">camelize</span><span class="token punctuation">(</span>nameMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    hoistStatic<span class="token punctuation">,</span>\n    cacheHandlers<span class="token punctuation">,</span>\n    nodeTransforms<span class="token punctuation">,</span> <span class="token comment">// 内置一些需要转换的方法</span>\n    <span class="token comment">/**\n     * bind、cloak、html、model、on、show、text\n    */</span>\n    directiveTransforms<span class="token punctuation">,</span> <span class="token comment">// 内置一些需要转换的一个指令</span>\n    transformHoist<span class="token punctuation">,</span>\n    isBuiltInComponent<span class="token punctuation">,</span> <span class="token comment">// 是否内置组件</span>\n    isCustomElement<span class="token punctuation">,</span> <span class="token comment">// 是否自定义元素</span>\n    expressionPlugins<span class="token punctuation">,</span>\n    scopeId<span class="token punctuation">,</span>\n    slotted<span class="token punctuation">,</span>\n    ssr<span class="token punctuation">,</span> <span class="token comment">// 是否ssr</span>\n    ssrCssVars<span class="token punctuation">,</span>\n    bindingMetadata<span class="token punctuation">,</span>\n    inline<span class="token punctuation">,</span>\n    isTS<span class="token punctuation">,</span> <span class="token comment">// 是否ts</span>\n    onError<span class="token punctuation">,</span>\n    onWarn<span class="token punctuation">,</span>\n    compatConfig<span class="token punctuation">,</span> <span class="token comment">// V2的兼容配置</span>\n\n    <span class="token comment">// state</span>\n    root<span class="token punctuation">,</span> <span class="token comment">// AST的一个根节点</span>\n    <span class="token comment">/**\n     * 转换的过程，用于维护的一个帮助函数，用于后面生成render funciton\n     * \n     * Symbol(toDisplayString)\n     * Symbol(createVNode)\n     * Symbol(vModelText)\n     * Symbol(withDirectives)\n     * Symbol(resolveComponent)\n     * Symbol(renderList)\n     * Symbol(Fragment)\n     * Symbol(openBlock)\n     * Symbol(createBlock)\n     * Symbol(Suspense)\n     * Symbol(withCtx)\n     * Symbol(Teleport)\n    */</span>\n    helpers<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 转换过程，组件内注册的组件</span>\n    directives<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 转换过程，组件内注册的指令</span>\n    hoists<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    constantCache<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    temps<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    cached<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    identifiers<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    scopes<span class="token operator">:</span> <span class="token punctuation">{</span>\n      vFor<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      vSlot<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      vPre<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      vOnce<span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    parent<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 父级AST节点</span>\n    currentNode<span class="token operator">:</span> root<span class="token punctuation">,</span> <span class="token comment">// 当前转换过程的AST节点</span>\n    childIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 当前转换过程的Index</span>\n\n    <span class="token comment">// methods</span>\n    <span class="token function">helper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> count <span class="token operator">=</span> context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>\n      context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> name\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">//...</span>\n\n  <span class="token keyword">return</span> context\n<span class="token punctuation">}</span>\n</code></pre></div>',
    3
  )
p.render = function(a, t, p, e, c, l) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
