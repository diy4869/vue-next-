import { o as n, c as s, a } from './app.c3e51dbf.js'
const t =
    '{"title":"静态提升","description":"","frontmatter":{},"headers":[{"level":2,"title":"静态提升","slug":"静态提升"},{"level":2,"title":"最终提升的一个例子","slug":"最终提升的一个例子"}],"relativePath":"compiler/staticHoist.md","lastUpdated":1625825595577}',
  p = {},
  o = a(
    '<h2 id="静态提升"><a class="header-anchor" href="#静态提升" aria-hidden="true">#</a> 静态提升</h2><p><code>vue-next</code>只会对静态节点和文本进行提升，对于动态的都不会提升。</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hoistStatic</span><span class="token punctuation">(</span>root<span class="token operator">:</span> RootNode<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">walk</span><span class="token punctuation">(</span>\n    root<span class="token punctuation">,</span>\n    context<span class="token punctuation">,</span>\n    <span class="token comment">// Root node is unfortunately non-hoistable due to potential parent</span>\n    <span class="token comment">// fallthrough attributes.</span>\n    <span class="token function">isSingleElementRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 是否单元素根节点</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSingleElementRoot</span><span class="token punctuation">(</span>\n  root<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  child<span class="token operator">:</span> TemplateChildNode\n<span class="token punctuation">)</span><span class="token operator">:</span> child <span class="token keyword">is</span> PlainElementNode <span class="token operator">|</span> ComponentNode <span class="token operator">|</span> TemplateNode <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> root\n  <span class="token comment">// children.length === 1 &amp;&amp; child.type === element &amp;&amp; 并且不是slot</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n    child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> \n    <span class="token operator">!</span><span class="token function">isSlotOutlet</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span>\n  node<span class="token operator">:</span> ParentNode<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span>\n  doNotHoistNode<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> hasHoistedNode <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token comment">// Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces</span>\n  <span class="token comment">// static bindings with expressions. These expressions are guaranteed to be</span>\n  <span class="token comment">// constant so they are still eligible for hoisting, but they are only</span>\n  <span class="token comment">// available at runtime and therefore cannot be evaluated ahead of time.</span>\n  <span class="token comment">// This is only a concern for pre-stringification (via transformHoist by</span>\n  <span class="token comment">// @vue/compiler-dom), but doing it here allows us to perform only one full</span>\n  <span class="token comment">// walk of the AST and allow `stringifyStatic` to stop walking as soon as its</span>\n  <span class="token comment">// stringficiation threshold is met.</span>\n\n  <span class="token keyword">let</span> canStringify <span class="token operator">=</span> <span class="token boolean">true</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> node\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token comment">// only plain elements &amp; text calls are eligible for hoisting. </span>\n    <span class="token comment">// 只有普通元素和文本才会被提升</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>\n      child<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> constantType <span class="token operator">=</span> doNotHoistNode\n        <span class="token operator">?</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span>\n        <span class="token operator">:</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>constantType <span class="token operator">&gt;</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">NOT_CONSTANT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>constantType <span class="token operator">&lt;</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          canStringify <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>constantType <span class="token operator">&gt;=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_HOIST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token punctuation">;</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>codegenNode <span class="token keyword">as</span> VNodeCall<span class="token punctuation">)</span><span class="token punctuation">.</span>patchFlag <span class="token operator">=</span>\n            PatchFlags<span class="token punctuation">.</span><span class="token constant">HOISTED</span> <span class="token operator">+</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* HOISTED */</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n          child<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">hoist</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>codegenNode<span class="token operator">!</span><span class="token punctuation">)</span>\n          hasHoistedNode <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token keyword">continue</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 节点可能包含动态子节点，但是props可以被提升</span>\n        <span class="token keyword">const</span> codegenNode <span class="token operator">=</span> child<span class="token punctuation">.</span>codegenNode<span class="token operator">!</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>codegenNode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">getPatchFlag</span><span class="token punctuation">(</span>codegenNode<span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>\n            <span class="token punctuation">(</span><span class="token operator">!</span>flag <span class="token operator">||</span>\n              flag <span class="token operator">===</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">NEED_PATCH</span> <span class="token operator">||</span>\n              flag <span class="token operator">===</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n            <span class="token function">getGeneratedPropsConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">&gt;=</span>\n              ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_HOIST</span>\n          <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">getNodeProps</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              codegenNode<span class="token punctuation">.</span>props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">hoist</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT_CALL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> contentType <span class="token operator">=</span> <span class="token function">getConstantType</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">&lt;</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_STRINGIFY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          canStringify <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">&gt;=</span> ConstantTypes<span class="token punctuation">.</span><span class="token constant">CAN_HOIST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          child<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">hoist</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span>\n          hasHoistedNode <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// walk further</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> isComponent <span class="token operator">=</span> child<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">COMPONENT</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span>scopes<span class="token punctuation">.</span>vSlot<span class="token operator">++</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">walk</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span>scopes<span class="token punctuation">.</span>vSlot<span class="token operator">--</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// v-for不要提升，他是个块</span>\n      <span class="token function">walk</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">,</span> child<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>branches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// v-if 不会提升，因为他是个block</span>\n        <span class="token function">walk</span><span class="token punctuation">(</span>\n          child<span class="token punctuation">.</span>branches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          child<span class="token punctuation">.</span>branches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>canStringify <span class="token operator">&amp;&amp;</span> hasHoistedNode <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>transformHoist<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token function">transformHoist</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="最终提升的一个例子"><a class="header-anchor" href="#最终提升的一个例子" aria-hidden="true">#</a> 最终提升的一个例子</h2><p>可以看到只有<code>div</code>进行了提升，提升的会以<code>hoisted</code>标明，因为这2个是静态的节点，至于<code>render</code>这块可以不用考虑。</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> \n  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span> \n  createVNode <span class="token keyword">as</span> _createVNode<span class="token punctuation">,</span> \n  vModelText <span class="token keyword">as</span> _vModelText<span class="token punctuation">,</span> \n  withDirectives <span class="token keyword">as</span> _withDirectives<span class="token punctuation">,</span> \n  resolveComponent <span class="token keyword">as</span> _resolveComponent<span class="token punctuation">,</span> \n  renderList <span class="token keyword">as</span> _renderList<span class="token punctuation">,</span> \n  Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span> \n  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span> \n  createBlock <span class="token keyword">as</span> _createBlock<span class="token punctuation">,</span> \n  Suspense <span class="token keyword">as</span> _Suspense<span class="token punctuation">,</span> \n  withCtx <span class="token keyword">as</span> _withCtx<span class="token punctuation">,</span> \n  Teleport <span class="token keyword">as</span> _Teleport \n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>\n\n<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;suspense&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;supense组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;telport组件&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> _component_test <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token keyword">class</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>\n      style<span class="token operator">:</span> <span class="token string">&#39;font-size: 14px; font-weight: bold;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment">/* TEXT, CLASS */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_withDirectives</span><span class="token punctuation">(</span><span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      ref<span class="token operator">:</span> <span class="token string">&quot;inputRef&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token operator">:</span> $event <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>inputVal <span class="token operator">=</span> $event<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;onUpdate:modelValue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">[</span>_vModelText<span class="token punctuation">,</span> _ctx<span class="token punctuation">.</span>inputVal<span class="token punctuation">]</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      onClick<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>add<span class="token punctuation">,</span>\n      style<span class="token operator">:</span> <span class="token punctuation">{</span>\n            color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;增加&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;onClick&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_createVNode</span><span class="token punctuation">(</span>_component_test<span class="token punctuation">,</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> _ctx<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_renderList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Suspense<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">_withCtx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n        _hoisted_1\n      <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      _<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">/* STABLE */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createBlock</span><span class="token punctuation">(</span>_Teleport<span class="token punctuation">,</span> <span class="token punctuation">{</span> to<span class="token operator">:</span> <span class="token string">&quot;body #suspense&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n      _hoisted_2\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Check the console for the AST</span>\n</code></pre></div>',
    6
  )
p.render = function(a, t, p, e, c, u) {
  return n(), s('div', null, [o])
}
export default p
export { t as __pageData }
